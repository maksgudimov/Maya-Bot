from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from emoji import emojize
from dateutil.relativedelta import relativedelta
# from lorabot.lorabot import LoraBot



import sqlite3 as sq
import sqlite3
import logging
import time
import datetime
import schedule
import asyncio
import threading
import io
import math

import openai
from googletrans import Translator

from aiogram.types import ChatActions

openai.api_key = "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" #
translator = Translator()

storage = MemoryStorage()

bot = Bot(token="5454478500:AAEE7tWJYsdMbP7tFpMT-ktMW-wcH3Zpios") #5454478500:AAEE7tWJYsdMbP7tFpMT-ktMW-wcH3Zpios

dp = Dispatcher(bot,storage=storage)
logging.basicConfig(level=logging.INFO)

scheduler = AsyncIOScheduler()

CHAT_ID = '-844286975'

#print(datetime.datetime.today().weekday())

# day2 = datetime.date.today() + relativedelta(months=-1)
# print(today)
# print(day2)
# print(datetime.timedelta(2))
# lora_bot = LoraBot("MAYA_TEST")





async def on_startup(_):
    print('–ë–æ—Ç –≤—ã—à–µ–ª –≤ –æ–Ω–ª–∞–π–Ω')
    global base, cur
    base = sq.connect('main.db')
    cur = base.cursor()
    if base:
        print('Data base connected OK!')

    #print(openai.Model.list())
    base.execute('CREATE TABLE IF NOT EXISTS users(id INTEGER,datatime REAL,call TEXT,link TEXT, name TEXT, spec TEXT, write_about TEXT,city TEXT,company TEXT,clever TEXT,q_help TEXT,PRIMARY KEY("id" AUTOINCREMENT))')
    base.commit()
    base.execute(
        'CREATE TABLE IF NOT EXISTS questions(id INTEGER,datatime REAL,call TEXT,link TEXT, text TEXT,PRIMARY KEY("id" AUTOINCREMENT))')
    base.commit()
    base.execute(
        'CREATE TABLE IF NOT EXISTS poshelania(id INTEGER,datatime REAL,call TEXT,link TEXT, text TEXT,PRIMARY KEY("id" AUTOINCREMENT))')
    base.commit()
    base.execute(
        'CREATE TABLE IF NOT EXISTS whatisfailed(id INTEGER,datatime REAL,call TEXT,link TEXT, text TEXT,PRIMARY KEY("id" AUTOINCREMENT))')
    base.commit()
    base.execute(
        'CREATE TABLE IF NOT EXISTS impression(id INTEGER,datatime REAL,call TEXT,link TEXT, text TEXT,PRIMARY KEY("id" AUTOINCREMENT))')
    base.commit()
    base.execute(
        'CREATE TABLE IF NOT EXISTS findispoln(id INTEGER,datatime REAL,call TEXT,link TEXT, who TEXT,srok TEXT,PRIMARY KEY("id" AUTOINCREMENT))')
    base.commit()
    base.execute(
        'CREATE TABLE IF NOT EXISTS adminNews(id INTEGER,who TEXT,img TEXT,text TEXT,PRIMARY KEY("id" AUTOINCREMENT))')
    base.commit()
    base.execute(
        'CREATE TABLE IF NOT EXISTS adminNewsLast(id INTEGER,img TEXT,text TEXT,PRIMARY KEY("id" AUTOINCREMENT))')
    base.commit()
    base.execute(
        'CREATE TABLE IF NOT EXISTS adminNewsBest(id INTEGER,img TEXT,text TEXT,PRIMARY KEY("id" AUTOINCREMENT))')
    base.commit()
    base.execute(
        'CREATE TABLE IF NOT EXISTS adminAvent(id INTEGER, img TEXT,text TEXT,PRIMARY KEY("id" AUTOINCREMENT))')
    base.commit()
    base.execute(
        'CREATE TABLE IF NOT EXISTS myResume(id INTEGER, datatime REAL,call TEXT,link TEXT,what TEXT,who TEXT,describe TEXT,link2 TEXT,price TEXT,PRIMARY KEY("id" AUTOINCREMENT))')
    base.commit()
    base.execute(
        'CREATE TABLE IF NOT EXISTS nextgo(id INTEGER,datatime REAL,call INTEGER,name TEXT,answer INTEGER,PRIMARY KEY("id" AUTOINCREMENT))')
    base.commit()
    base.execute(
        'CREATE TABLE IF NOT EXISTS statistic_start(id INTEGER,datatime REAL,spec TEXT,call INTEGER,kol INTEGER,PRIMARY KEY("id" AUTOINCREMENT))')
    base.commit()



# def mes(callback):
#     bot.send_message(callback,f"test")
#
# def message2days(callback):
#     schedule.every().minute().do(mes(callback))
#     while True:
#         schedule.run_pending()
async def sql_add_command(state):
    async with state.proxy() as data:
        cur.execute('INSERT INTO users(datatime,call,link,name,spec) VALUES (?,?,?,?,?)',tuple(data.values()))
        base.commit()

async def sql_add_q(state):
    async with state.proxy() as data:
        cur.execute('INSERT INTO questions(datatime,call,text,link) VALUES (?,?,?,?)',
                    tuple(data.values()))
        base.commit()

async def sql_add_poshelania(state):
    async with state.proxy() as data:
        cur.execute('INSERT INTO poshelania(datatime,call,text,link) VALUES (?,?,?,?)',
                    tuple(data.values()))
        base.commit()

async def sql_add_fail(state):
    async with state.proxy() as data:
        cur.execute('INSERT INTO whatisfailed(datatime,call,text,link) VALUES (?,?,?,?)',
                    tuple(data.values()))
        base.commit()

async def sql_add_impression(state):
    async with state.proxy() as data:
        cur.execute('INSERT INTO impression(datatime,call,text,link) VALUES (?,?,?,?)',
                    tuple(data.values()))
        base.commit()

async def sql_add_ispoln(state):
    async with state.proxy() as data:
        cur.execute('INSERT INTO findispoln(datatime,call,link,who,srok) VALUES (?,?,?,?,?)',
                    tuple(data.values()))
        base.commit()

async def sql_add_adminNews(state):
    async with state.proxy() as data:
        cur.execute('INSERT INTO adminNews(who,img,text) VALUES (?,?,?)',
                    tuple(data.values()))
        base.commit()

async def sql_add_adminAvent(state):
    async with state.proxy() as data:
        cur.execute('INSERT INTO adminAvent(img,text) VALUES (?,?)',
                    tuple(data.values()))
        base.commit()

async def sql_add_MyResume(state):
    async with state.proxy() as data:
        cur.execute('INSERT INTO myResume(datatime,call,link,what,who,describe,link2,price) VALUES (?,?,?,?,?,?,?,?)',
                    tuple(data.values()))
        base.commit()

async def sql_add_adminNewsLast(state):
    async with state.proxy() as data:
        cur.execute('INSERT INTO adminNewsLast(text) VALUES (?)',
                    tuple(data.values()))
        base.commit()

async def sql_add_adminNewsBest(state):
    async with state.proxy() as data:
        cur.execute('INSERT INTO adminNewsBest(text) VALUES (?)',
                    tuple(data.values()))
        base.commit()

# analytics_markup = types.ReplyKeyboardMarkup(True)
# menu_analytics = ['Total', 'Users', 'Messages', 'Events', 'Rating', 'SQL']
# analytics_markup.row(menu_analytics[0], menu_analytics[1])
# analytics_markup.row(menu_analytics[2], menu_analytics[3])
# analytics_markup.row(menu_analytics[4])
# analytics_markup.row(menu_analytics[5])
#
# no_markup = types.ReplyKeyboardMarkup(True)
# no_markup.row('No')

kb_spec = types.InlineKeyboardMarkup(row_width=1)
spec_b1 = types.InlineKeyboardButton(text=f"{emojize(':shopping_bags:')} –°—Ç–∏–ª–∏—Å—Ç", callback_data="spec_stylist")
spec_b2 = types.InlineKeyboardButton(text=f"{emojize(':lab_coat:')} –î–∏–∑–∞–π–Ω–µ—Ä", callback_data="spec_designer")
spec_b3 = types.InlineKeyboardButton(text=f"{emojize(':thread:')} –í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞", callback_data="spec_ProductionOwner")
spec_b4 = types.InlineKeyboardButton(text=f"{emojize(':newspaper:')} –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–µ–∫–ª–∞–º–µ", callback_data="spec_Marketing")
spec_b5 = types.InlineKeyboardButton(text=f"{emojize(':label:')} –í–ª–∞–¥–µ–ª–µ—Ü –±—Ä–µ–Ω–¥–∞", callback_data="spec_BrandOwner")
spec_b6 = types.InlineKeyboardButton(text=f"{emojize(':triangular_ruler:')} –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", callback_data="spec_constructor")
spec_b7 = types.InlineKeyboardButton(text=f"{emojize(':bookmark_tabs:')} –ë–∞–π–µ—Ä", callback_data="spec_bayer")
spec_b8 = types.InlineKeyboardButton(text=f"{emojize(':office_building:')} –í–ª–∞–¥–µ–ª–µ—Ü –±—É—Ç–∏–∫–∞", callback_data="spec_boutiqueOwner")
spec_b9 = types.InlineKeyboardButton(text=f"{emojize(':NEW_button:')} –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="spec_MyAnswer")
kb_spec.add(spec_b1,spec_b2,spec_b3,spec_b4,spec_b5,spec_b6,spec_b7,spec_b8,spec_b9)

# kb_bot = types.InlineKeyboardMarkup(row_width=1)
# bot_b1 = types.InlineKeyboardButton(text=f"{emojize(':magnifying_glass_tilted_left:')} –ù–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="bot_contacts")
# bot_b2 = types.InlineKeyboardButton(text=f"{emojize(':mirror_ball:')} –û—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="bot_sure")
# bot_b3 = types.InlineKeyboardButton(text=f"{emojize(':bookmark_tabs:')} –ü—Ä–∏—Å—ã–ª–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–¥–±–æ—Ä–∫–∏ –ø–æ–ª–µ–∑–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –º–æ–¥–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞", callback_data="bot_news")
# bot_b4 = types.InlineKeyboardButton(text=f"{emojize(':identification_card:')} –í—ã–¥–∞–≤–∞—Ç—å —Ä–µ–∑—é–º–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤", callback_data="bot_resume")
# bot_b5 = types.InlineKeyboardButton(text=f"{emojize(':pushpin:')} –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="bot_vacanci")
# bot_b6 = types.InlineKeyboardButton(text=f"{emojize(':woman_dancing:')} –¢–∞–Ω—Ü–µ–≤–∞—Ç—å —Ä—É–º–±—É", callback_data="bot_rumba")
#
# kb_bot.add(bot_b1,bot_b2,bot_b3,bot_b4,bot_b5,bot_b6)

kb_answer1 = types.InlineKeyboardMarkup(row_width=1)
answer1_b1 = types.InlineKeyboardButton(text=f"{emojize(':magnifying_glass_tilted_left:')} –ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏", callback_data="answer_networks")
answer1_b2 = types.InlineKeyboardButton(text=f"–°–æ–æ–±—â–µ—Å—Ç–≤–æ –ú–∞–π–∏ üíµ", url="https://t.me/+25qhiIYCgWw3ZTVi")#{emojize(':newspaper:')}  callback_data="answer_news" –ù–æ–≤–æ—Å—Ç–∏ –∏ –∞–Ω–æ–Ω—Å—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Ä–∞–Ω—å—à–µ –±—ã–ª–∞
answer1_b3 = types.InlineKeyboardButton(text=f"{emojize(':identification_card:')} –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="answer_ispoln")
answer1_b4 = types.InlineKeyboardButton(text=f"{emojize(':briefcase:')} –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ —É—Å–ª—É–≥–∏", callback_data="answer_my")
answer1_b5 = types.InlineKeyboardButton(text=f"{emojize(':fire:')} –ú–∞–π—è, –ø–æ–º–æ–≥–∏", callback_data="answer_helpme")
answer1_b6 = types.InlineKeyboardButton(text=f"–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç –ú–∞–π–∏ üí°", callback_data="answer_AI")
kb_answer1.add(answer1_b1,answer1_b2,answer1_b3,answer1_b4,answer1_b5,answer1_b6)

kb_answer2 = types.InlineKeyboardMarkup(row_width=1)
answer2_b1 = types.InlineKeyboardButton(text=f"–ü–æ–¥–æ–∂–¥–∏, –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å!", callback_data="answer2_question")
answer2_b2 = types.InlineKeyboardButton(text=f"–î–∞, –Ω–∞—á–∏–Ω–∞–µ–º!", callback_data="answer2_yes")
kb_answer2.add(answer2_b1,answer2_b2)

kb_answer3 = types.InlineKeyboardMarkup(row_width=1)
answer3_b1 = types.InlineKeyboardButton(text=f"–ü–æ–¥–æ–∂–¥–∏, –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å!", callback_data="answer3_question")
answer3_b2 = types.InlineKeyboardButton(text=f"–î–∞, –∏–¥—É –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!", callback_data="answer3_yes")
kb_answer3.add(answer3_b1,answer3_b2)

kb_parser = types.InlineKeyboardMarkup(row_width=1)
parser_b1 = types.InlineKeyboardButton(text=f"{emojize(':newspaper:')} –ù–æ–≤–æ—Å—Ç–∏", callback_data="parser_news")
parser_b2 = types.InlineKeyboardButton(text=f"{emojize(':calendar:')} –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="parser_meropri")
kb_parser.add(parser_b1,parser_b2)

def kb_dop_parser(callback):
    # (spec,) = cur.execute(f"SELECT spec FROM users WHERE call = {callback}").fetchone()
    # base.commit()
    kb_dop_parser = types.InlineKeyboardMarkup(row_width=1)
    dop_b1 = types.InlineKeyboardButton(text=f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="dop_news")
    #dop_b2 = types.InlineKeyboardButton(text=f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞", callback_data="dop_meropri")
    dop_b3 = types.InlineKeyboardButton(text=f"–õ—É—á—à–µ–µ –∑–∞ –º–µ—Å—è—Ü", callback_data="dop_mounth")
    kb_dop_parser.add(dop_b1,dop_b3)
    return kb_dop_parser

kb_answer4 = types.InlineKeyboardMarkup(row_width=1)
# answer4_b1 = types.InlineKeyboardButton(text=f"–î–∞", callback_data="answer4_yes")
# answer4_b2 = types.InlineKeyboardButton(text=f"–ù–µ—Ç", callback_data="answer4_no")
answer4_b3 = types.InlineKeyboardButton(text=f"–î–∞–ª—å—à–µ {emojize(':right_arrow:')}", callback_data="answer4_more")
kb_answer4.add(answer4_b3)

kb_answer6 = types.InlineKeyboardMarkup(row_width=1)
# answer6_b1 = types.InlineKeyboardButton(text=f"–î–∞", callback_data="answer6_yes")
# answer6_b2 = types.InlineKeyboardButton(text=f"–ù–µ—Ç", callback_data="answer6_no")
answer6_b3 = types.InlineKeyboardButton(text=f"–î–∞–ª—å—à–µ {emojize(':right_arrow:')}", callback_data="answer6_more")
kb_answer6.add(answer6_b3)

kb_answer7 = types.InlineKeyboardMarkup(row_width=1)
# answer7_b1 = types.InlineKeyboardButton(text=f"–î–∞", callback_data="answer7_yes")
# answer7_b2 = types.InlineKeyboardButton(text=f"–ù–µ—Ç", callback_data="answer7_no")
answer7_b3 = types.InlineKeyboardButton(text=f"–î–∞–ª—å—à–µ {emojize(':right_arrow:')}", callback_data="answer7_more")
kb_answer7.add(answer7_b3)

kb_answer8 = types.InlineKeyboardMarkup(row_width=1)
# answer8_b1 = types.InlineKeyboardButton(text=f"–î–∞", callback_data="answer8_yes")
# answer8_b2 = types.InlineKeyboardButton(text=f"–ù–µ—Ç", callback_data="answer8_no")
answer8_b3 = types.InlineKeyboardButton(text=f"–î–∞–ª—å—à–µ {emojize(':right_arrow:')}", callback_data="answer8_more")
kb_answer8.add(answer8_b3)


kb_answer5 = types.InlineKeyboardMarkup(row_width=1)
answer5_b1 = types.InlineKeyboardButton(text=f"–î–∞, —Ö–æ—á—É –∑–∞–¥–∞—Ç—å", callback_data="answer5_yes")
answer5_b2 = types.InlineKeyboardButton(text=f"–ù–µ—Ç, –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ", callback_data="answer5_no")
kb_answer5.add(answer5_b1,answer5_b2)

kb_days2answer1 = types.InlineKeyboardMarkup(row_width=1)
days2answer1_b1 = types.InlineKeyboardButton(text=f"–î–∞", callback_data="days2answer1_yes")
days2answer1_b2 = types.InlineKeyboardButton(text=f"–ù–µ—Ç", callback_data="days2answer1_no")
kb_days2answer1.add(days2answer1_b1,days2answer1_b2)

kb_days2answer2 = types.InlineKeyboardMarkup(row_width=1)
days2answer2_b1 = types.InlineKeyboardButton(text=f"–ï—â–µ –Ω–µ —Å–≤—è–∑–∞–ª–∏—Å—å", callback_data="days2answer2_nosobes")
days2answer2_b2 = types.InlineKeyboardButton(text=f"–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª", callback_data="days2answer2_noanswer")
days2answer2_b3 = types.InlineKeyboardButton(text=f"–ù–µ –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏", callback_data="days2answer2_notime")
days2answer2_b4 = types.InlineKeyboardButton(text=f"–î—Ä—É–≥–æ–µ", callback_data="days2answer2_some")
kb_days2answer2.add(days2answer2_b1,days2answer2_b2,days2answer2_b3,days2answer2_b4)

kb_days2answer3 = types.InlineKeyboardMarkup(row_width=1)
days2answer3_b1 = types.InlineKeyboardButton(text=f"–î–∞ {emojize(':repeat_button:')}", callback_data="days2answer3_yes")
days2answer3_b2 = types.InlineKeyboardButton(text=f"–í–æ–∑—å–º—É –ø–∞—É–∑—É {emojize(':pause_button:')}", callback_data="days2answer3_pause")
kb_days2answer3.add(days2answer3_b1,days2answer3_b2)

kb_helpMaya = types.InlineKeyboardMarkup(row_width=1)
helpMaya_b1 = types.InlineKeyboardButton(text=f"–î–∞, –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data="helpMaya_yes")
helpMaya_b2 = types.InlineKeyboardButton(text=f"–°–µ–π—á–∞—Å –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–∞", callback_data="helpMaya_no")
kb_helpMaya.add(helpMaya_b1,helpMaya_b2)



def kb_for_admin():
    kb_admin = types.InlineKeyboardMarkup(row_width=1)
    admin_b1 = types.InlineKeyboardButton(text=f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    admin_b2 = types.InlineKeyboardButton(text=f"–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö", callback_data="admin_avent")
    admin_b3 = types.InlineKeyboardButton(text=f"–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="admin_answer")
    admin_b4 = types.InlineKeyboardButton(text=f"–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ –≥—Ä—É–ø–ø–∞–º(–î–∏–∑–∞–π–Ω–µ—Ä—ã –∏ —Ç.–¥.)", callback_data="admin_group")
    admin_b5 = types.InlineKeyboardButton(text=f"–ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º", callback_data="admin_all")
    admin_b6 = types.InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ù–æ–≤–æ—Å—Ç–∏", callback_data="admin_delNews")
    admin_b7 = types.InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="admin_delAvent")
    admin_b8 = types.InlineKeyboardButton(text=f"–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="admin_lastNews")
    admin_b9 = types.InlineKeyboardButton(text=f"–î–æ–±–∞–≤–∏—Ç—å –ª—É—á—à–µ–µ –∑–∞ –º–µ—Å—è—Ü", callback_data="admin_bestNews")
    admin_b10 = types.InlineKeyboardButton(text=f"–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ –≥—Ä—É–ø–ø–∞–º(–Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥ –∏ —Ç.–¥.)", callback_data="admin_groupdb")
    kb_admin.add(admin_b1,admin_b8,admin_b9,admin_b2,admin_b3,admin_b4,admin_b5,admin_b6,admin_b7,admin_b10)
    return kb_admin

kb_group = types.InlineKeyboardMarkup(row_width=1)
group_b1 = types.InlineKeyboardButton(text=f"–°—Ç–∏–ª–∏—Å—Ç", callback_data="group_stylist")
group_b2 = types.InlineKeyboardButton(text=f"–î–∏–∑–∞–π–Ω–µ—Ä", callback_data="group_designer")
group_b3 = types.InlineKeyboardButton(text=f"–í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞", callback_data="group_ProductionOwner")
group_b4 = types.InlineKeyboardButton(text=f"–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, HR, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏ —Ç.–ø.", callback_data="group_Marketing")
group_b5 = types.InlineKeyboardButton(text=f"–í–ª–∞–¥–µ–ª–µ—Ü –±—Ä–µ–Ω–¥–∞", callback_data="group_BrandOwner")
group_b6 = types.InlineKeyboardButton(text=f"–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", callback_data="group_constructor")
group_b7 = types.InlineKeyboardButton(text=f"–ë–∞–π–µ—Ä", callback_data="group_bayer")
group_b8 = types.InlineKeyboardButton(text=f"–í–ª–∞–¥–µ–ª–µ—Ü –±—É—Ç–∏–∫–∞", callback_data="group_boutiqueOwner")
group_b9 = types.InlineKeyboardButton(text=f"–ù–∞–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É –≤—Ä—É—á–Ω—É—é", callback_data="group_write")
kb_group.add(group_b1,group_b2,group_b3,group_b4,group_b5,group_b6,group_b7,group_b8,group_b9)

kb_ready_networking = types.InlineKeyboardMarkup(row_width=1)
readyNetworking_b1 = types.InlineKeyboardButton(text=f"–ü–æ–µ—Ö–∞–ª–∏!", callback_data="readyNetworking")
kb_ready_networking.add(readyNetworking_b1)

kb_go_next1 = types.InlineKeyboardMarkup(row_width=1)
gonext_b1 = types.InlineKeyboardButton(text=f"üëâ –Ø—Å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–πü§ì", callback_data="gonext1")
kb_go_next1.add(gonext_b1)

kb_go_next2 = types.InlineKeyboardMarkup(row_width=1)
gonext_b2 = types.InlineKeyboardButton(text=f"üëâ –û–∫, –∂–¥—É –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫üëç", callback_data="gonext2")
kb_go_next2.add(gonext_b2)

kb_go_next3 = types.InlineKeyboardMarkup(row_width=1)
gonext_b3 = types.InlineKeyboardButton(text=f"üëâ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="gonext3")
kb_go_next3.add(gonext_b3)

kb_of_send_vack = types.InlineKeyboardMarkup(row_width=1)
sendVack_b1 = types.InlineKeyboardButton(text=f"–í —à—Ç–∞—Ç", callback_data="sendVack_shtat")
sendVack_b2 = types.InlineKeyboardButton(text=f"–ù–∞ –ø—Ä–æ–µ–∫—Ç–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="sendVack_project")
sendVack_b3 = types.InlineKeyboardButton(text=f"–ù–∞ —Ä–∞–∑–æ–≤—É—é —É—Å–ª—É–≥—É", callback_data="sendVack_ones")
kb_of_send_vack.add(sendVack_b1,sendVack_b2,sendVack_b3)

kb_thankyou = types.InlineKeyboardMarkup(row_width=1)
thankyou_b1 = types.InlineKeyboardButton(text=f"–°–ø–∞—Å–∏–±–æ!", callback_data="thankyou")
kb_thankyou.add(thankyou_b1)

kb_greatmeropr = types.InlineKeyboardMarkup(row_width=1)
greatmeropr_b1 = types.InlineKeyboardButton(text=f"–ö—Ä—É—Ç–æ, –∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è?", callback_data="greatmeropr")
kb_greatmeropr.add(greatmeropr_b1)

kb_greatgo = types.InlineKeyboardMarkup(row_width=1)
greatgo_b1 = types.InlineKeyboardButton(text=f"–ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ, –¥–∞–≤–∞–π!", callback_data="greatgo")
kb_greatgo.add(greatgo_b1)

kb_stats = types.InlineKeyboardMarkup(row_width=1)
stats_b1 = types.InlineKeyboardButton(text=f"–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="stats_users")
stats_b2 = types.InlineKeyboardButton(text=f"–ö–æ–ª-–≤–æ –≤—Å–µ–≥–æ –∑–∞—Ö–æ–¥–æ–≤", callback_data="stats_start")
stats_b3 = types.InlineKeyboardButton(text=f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è", callback_data="stats_activate")
stats_b4 = types.InlineKeyboardButton(text=f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º", callback_data="stats_spec")
stats_b5 = types.InlineKeyboardButton(text=f"–û—Ç—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="stats_ottok")
kb_stats.add(stats_b1,stats_b2,stats_b3,stats_b4,stats_b5)
#for stat users
kb_time1 = types.InlineKeyboardMarkup(row_width=1)
time1_b1 = types.InlineKeyboardButton(text=f"–î–µ–Ω—å", callback_data="time1_today")
time1_b2 = types.InlineKeyboardButton(text=f"–ù–µ–¥–µ–ª—è", callback_data="time1_week")
time1_b3 = types.InlineKeyboardButton(text=f"–ú–µ—Å—è—Ü", callback_data="time1_mounth")
kb_time1.add(time1_b1,time1_b2,time1_b3)
#for stat start
kb_time2 = types.InlineKeyboardMarkup(row_width=1)
time2_b1 = types.InlineKeyboardButton(text=f"–î–µ–Ω—å", callback_data="time2_today")
time2_b2 = types.InlineKeyboardButton(text=f"–ù–µ–¥–µ–ª—è", callback_data="time2_week")
time2_b3 = types.InlineKeyboardButton(text=f"–ú–µ—Å—è—Ü", callback_data="time2_mounth")
kb_time2.add(time2_b1,time2_b2,time2_b3)
#for stat activation
kb_time3 = types.InlineKeyboardMarkup(row_width=1)
time3_b1 = types.InlineKeyboardButton(text=f"–î–µ–Ω—å", callback_data="time3_today")
time3_b2 = types.InlineKeyboardButton(text=f"–ù–µ–¥–µ–ª—è", callback_data="time3_week")
time3_b3 = types.InlineKeyboardButton(text=f"–ú–µ—Å—è—Ü", callback_data="time3_mounth")
kb_time3.add(time3_b1,time3_b2,time3_b3)
#for stat spec
kb_time4 = types.InlineKeyboardMarkup(row_width=1)
time4_b1 = types.InlineKeyboardButton(text=f"–î–µ–Ω—å", callback_data="time4_today")
time4_b2 = types.InlineKeyboardButton(text=f"–ù–µ–¥–µ–ª—è", callback_data="time4_week")
time4_b3 = types.InlineKeyboardButton(text=f"–ú–µ—Å—è—Ü", callback_data="time4_mounth")
kb_time4.add(time4_b1,time4_b2,time4_b3)
#back networking
kb_back1 = types.InlineKeyboardMarkup(row_width=1)
back1_b1 = types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data="back1_1")
kb_back1.add(back1_b1)

kb_back2 = types.InlineKeyboardMarkup(row_width=1)
back2_b2 = types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data="back2_1")
kb_back2.add(back2_b2)

kb_back3 = types.InlineKeyboardMarkup(row_width=1)
back3_b3 = types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data="back3_1")
kb_back3.add(back3_b3)

kb_back4 = types.InlineKeyboardMarkup(row_width=1)
back4_b4 = types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data="back4_1")
kb_back4.add(back4_b4)

# –∫–ª–∞–≤–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Ä–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º —é–∑–µ—Ä–∞–º –ª–∞–π–∫\–¥–∏–∑ –∏–ª–∏ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç —é–∑–µ—Ä–∞
kb_adminall = types.InlineKeyboardMarkup(row_width=1)
adminall_b1 = types.InlineKeyboardButton(text=f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ —Å —Ä–µ–∞–∫—Ü–∏–µ–π", callback_data="adminall_newslike")
adminall_b2 = types.InlineKeyboardButton(text=f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏", callback_data="adminall_quest")
kb_adminall.add(adminall_b1,adminall_b2)
# like and disslike
kb_like = types.InlineKeyboardMarkup(row_width=2)
like_b1 = types.InlineKeyboardButton(text=f"üëç", callback_data="like_like")
like_b2 = types.InlineKeyboardButton(text=f"üëé", callback_data="like_diss")
kb_like.add(like_b1,like_b2)
#for admin message to group by db
kb_groupbudb = types.InlineKeyboardMarkup(row_width=1)
groupbudb_b1 = types.InlineKeyboardButton(text=f"–ù–µ —É—à–µ–ª –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="groupbudb_reg")
groupbudb_b2 = types.InlineKeyboardButton(text=f"–ù–µ —É—à–µ–ª –≤ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥", callback_data="groupbudb_net")
groupbudb_b3 = types.InlineKeyboardButton(text=f"–ù–µ –ø—É–±–ª–∏–∫—É–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="groupbudb_vac")
groupbudb_b4 = types.InlineKeyboardButton(text=f"–ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É—Å–ª—É–≥–∏", callback_data="groupbudb_uslugi")
groupbudb_b5 = types.InlineKeyboardButton(text=f"–ù–µ —Ç—ã–∫–∞–ª –Ω–æ–≤–æ—Å—Ç–∏", callback_data="groupbudb_news")
kb_groupbudb.add(groupbudb_b1,groupbudb_b2,groupbudb_b3,groupbudb_b4,groupbudb_b5)





class Question(StatesGroup):
    q_from_user = State()

class Poshelania(StatesGroup):
    ans = State()

class Days2message(StatesGroup):
    impression = State()

class WhatIsFail(StatesGroup):
    fail = State()

class FindIspoln(StatesGroup):
    who = State()
    describe = State()

class My(StatesGroup):
    what = State()
    who = State()
    describe = State()
    link2 = State()
    price = State()

class User(StatesGroup):
    name = State()
    spec = State()
    soclink = State()
    city = State()
    company = State()
    role = State()
    clever = State()
    q_help = State()

class AdminNews(StatesGroup):
    who = State()
    img = State()
    text = State()

class AdminNewsLast(StatesGroup):
    img = State()
    text = State()

class AdminNewsBest(StatesGroup):
    img = State()
    text = State()


class AdminAvent(StatesGroup):
    img = State()
    text = State()
class AdminMessage(StatesGroup):
    call = State()
    mess = State()

class AdminMessageGroup(StatesGroup):
    group = State()
    mess = State()

class AdminMessageAll(StatesGroup):
    mess = State()

class FromAdmin(StatesGroup):
    message = State()
    toadminmess = State()

class ForGroupByDb(StatesGroup):
    message = State()

class IIbot(StatesGroup):
    start = State()
    message = State()

###about
async def about(message:types.Message):
    await bot.send_message(message.chat.id,f"–ú–∞–π—è ‚Äì –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π –º–æ–¥–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞, —Ü–µ–ª—å –∫–æ—Ç–æ—Ä–æ–≥–æ —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Ä—É—Ç–∏–Ω–Ω—ã–µ –∏ —Ç—Ä—É–¥–æ–µ–º–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã. –ï–π –º–æ–∂–Ω–æ –¥–æ–≤–µ—Ä–∏—Ç—å –ª—é–±—É—é –∑–∞–¥–∞—á—É –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")

async def contacts(message:types.Message):
    await bot.send_message(message.chat.id,f"–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞, —Ä–µ–∫–ª–∞–º—ã ‚Äì @maya_mono")

######### admin open
async def admin(message:types.Message,state: FSMContext):
    await bot.send_message(message.chat.id,f"–¢—ã –≤ –ê–¥–º–∏–Ω–∫–µ!\n–í—ã–±–∏—Ä–∞–π –∏ –¥–µ–π—Å—Ç–≤—É–π –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",reply_markup=kb_for_admin())

async def adminCall1(callback:types.CallbackQuery,state: FSMContext):
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "stats":
        await bot.send_message(callback.from_user.id,f"–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å? ",reply_markup=kb_stats)
    if str == "news":
        await bot.send_message(callback.from_user.id,f"–ù–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",reply_markup=kb_group)
        await AdminNews.who.set()
    if str == "avent":
        await bot.send_message(callback.from_user.id, f"–û—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É")
        await AdminAvent.img.set()
    if str == "answer":
        await bot.send_message(callback.from_user.id, f"–û—Ç–ø—Ä–∞–≤—å callback –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ( —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –±–¥ –≤ —Ç–∞–±–ª–∏—Ü–µ users –≤ —Å—Ç–æ–ª–±–∏–∫–µ call)")
        await AdminMessage.call.set()
    if str == "group":
        await bot.send_message(callback.from_user.id,
                               f"–ö–∞–∫—É—é –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? –î–∏–∑–∞–π–Ω–µ—Ä –∏–ª–∏ –°—Ç–∏–ª–∏—Å—Ç –∏–ª–∏ –∏ —Ç.–¥.")
        await AdminMessageGroup.group.set()
    if str == "all":
        await bot.send_message(callback.from_user.id,
                               f"–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å?",reply_markup=kb_adminall)
        # await AdminMessageAll.mess.set()

    if str == "delNews":
        cur.execute("DELETE from adminNews")
        base.commit()
        await bot.send_message(callback.from_user.id,
                               f"–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω—ã!",reply_markup=kb_for_admin())

    if str == "delAvent":
        cur.execute("DELETE from adminAvent")
        base.commit()
        await bot.send_message(callback.from_user.id,
                               f"–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É–¥–∞–ª–µ–Ω—ã!", reply_markup=kb_for_admin())

    if str == "lastNews":
        await bot.send_message(callback.from_user.id,
                               f"–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –ù–æ–≤–æ—Å—Ç–∏")
        await AdminNewsLast.text.set()
    if str == "bestNews":
        await bot.send_message(callback.from_user.id,
                               f"–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –ù–æ–≤–æ—Å—Ç–∏")
        await AdminNewsBest.text.set()
    if str == "groupdb":
        await bot.send_message(callback.from_user.id,f"–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É —é–∑–µ—Ä–æ–≤",reply_markup=kb_groupbudb)

# async def AdminLastNewsPhoto(message:types.Message,state: FSMContext):
#     async with state.proxy() as data:
#         data['img'] = message.photo[0].file_id
#     await bot.send_message(message.chat.id,f"–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏")
#     await AdminNewsLast.text.set()



async def AdminLastNewsText(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
    await sql_add_adminNewsLast(state)
    await bot.send_message(message.chat.id, f"–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞", reply_markup=kb_for_admin())
    await state.finish()


async def AdminBestNewsText(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
    await sql_add_adminNewsBest(state)
    await bot.send_message(message.chat.id, f"–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞", reply_markup=kb_for_admin())
    await state.finish()


async def adminWhoButtonNews(callback:types.CallbackQuery,state: FSMContext):
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "stylist":
        async with state.proxy() as data:
            data['who'] = "–°—Ç–∏–ª–∏—Å—Ç"
        await bot.send_message(callback.from_user.id, f"–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–æ–≤–æ—Å—Ç–∏")
        await AdminNews.img.set()
    if str == "designer":
        async with state.proxy() as data:
            data['who'] = "–î–∏–∑–∞–π–Ω–µ—Ä"
        await bot.send_message(callback.from_user.id, f"–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–æ–≤–æ—Å—Ç–∏")
        await AdminNews.img.set()
    if str == "ProductionOwner":
        async with state.proxy() as data:
            data['who'] = "–í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"
        await bot.send_message(callback.from_user.id, f"–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–æ–≤–æ—Å—Ç–∏")
        await AdminNews.img.set()

    if str == "Marketing":
        async with state.proxy() as data:
            data['who'] = "–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, HR, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏ —Ç.–ø."
        await bot.send_message(callback.from_user.id, f"–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–æ–≤–æ—Å—Ç–∏")
        await AdminNews.img.set()

    if str == "BrandOwner":
        async with state.proxy() as data:
            data['who'] = "–í–ª–∞–¥–µ–ª–µ—Ü –±—Ä–µ–Ω–¥–∞"
        await bot.send_message(callback.from_user.id, f"–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–æ–≤–æ—Å—Ç–∏")
        await AdminNews.img.set()

    if str == "constructor":
        async with state.proxy() as data:
            data['who'] = "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä"
        await bot.send_message(callback.from_user.id, f"–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–æ–≤–æ—Å—Ç–∏")
        await AdminNews.img.set()

    if str == "bayer":
        async with state.proxy() as data:
            data['who'] = "–ë–∞–π–µ—Ä"
        await bot.send_message(callback.from_user.id, f"–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–æ–≤–æ—Å—Ç–∏")
        await AdminNews.img.set()

    if str == "boutiqueOwner":
        async with state.proxy() as data:
            data['who'] = "–í–ª–∞–¥–µ–ª–µ—Ü –±—É—Ç–∏–∫–∞"
        await bot.send_message(callback.from_user.id, f"–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–æ–≤–æ—Å—Ç–∏")
        await AdminNews.img.set()

    if str == "write":
        await bot.send_message(callback.from_user.id, f"–ù–∞–ø–∏—à–∏ –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")


async def adminWhoNews(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['who'] = message.text
    await bot.send_message(message.chat.id,f"–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–æ–≤–æ—Å—Ç–∏")
    await AdminNews.img.set()

async def adminPhotoNews(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['img'] = message.photo[0].file_id
    await bot.send_message(message.chat.id,f"–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏")
    await AdminNews.text.set()

async def adminTextNews(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
    await sql_add_adminNews(state)
    await bot.send_message(message.chat.id, f"–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞",reply_markup=kb_for_admin())
    await state.finish()

async def adminPhotoAvent(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['img'] = message.photo[0].file_id
    await bot.send_message(message.chat.id,f"–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    await AdminAvent.text.set()

async def adminTextAvent(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
    await sql_add_adminAvent(state)
    await bot.send_message(message.chat.id, f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ",reply_markup=kb_for_admin())
    await state.finish()
callAdmin = 0
messAdmin = 0
async def adminCallMess(message:types.Message,state: FSMContext):
    global callAdmin
    global messAdmin
    async with state.proxy() as data:
        data['call'] = message.text
        callAdmin = data['call']
    await bot.send_message(message.chat.id, f"–û–∫–µ–π, –∞ —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –°—é–¥–∞ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–∏—Ç—å , –∫ –ø—Ä–∏–º–µ—Ä—É —Å—Å—ã–ª–∫—É. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ç—ã –Ω–∞–ø–∏—à–µ—à—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
    await AdminMessage.mess.set()
async def adminTextMess(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['mess'] = message.text
        messAdmin = data['mess']
        try:
            await bot.send_message(data['call'], f"{messAdmin}")
            await bot.send_message(message.chat.id, f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", reply_markup=kb_for_admin())
            await state.finish()
        except:
            await bot.send_message(message.chat.id, f"–£–≤—ã, –Ω–æ —é–∑–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞...", reply_markup=kb_for_admin())
            cur.execute(f"DELETE FROM users WHERE call = {data['call']}")
            base.commit()
            await state.finish()


async def adminTextAll(message:types.Message,state:FSMContext):
    async with state.proxy() as data:
        data['mess'] = message.text
        allmess = data['mess']
    for (ret,) in cur.execute(f"SELECT call FROM users"):
        try:
            await bot.send_message(ret,f"{allmess}\n\n–û—Å—Ç–∞–≤—å —Ä–µ–∞–∫—Ü–∏—é!",reply_markup=kb_like)
        except:
            cur.execute(f"DELETE FROM users WHERE call = {ret}")
            base.commit()
            continue


    await bot.send_message(message.chat.id, f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", reply_markup=kb_for_admin())
    await state.finish()

async def adminTextGroup(message:types.Message,state:FSMContext):
    async with state.proxy() as data:
        data['group'] = message.text
    await bot.send_message(message.chat.id, f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã:")
    await AdminMessageGroup.mess.set()

async def adminTextGroupMess(message:types.Message,state:FSMContext):
    async with state.proxy() as data:
        data['mess'] = message.text
    async with state.proxy() as data:
        for (ret,) in cur.execute(f"SELECT call FROM users WHERE spec = '{data['group']}'"):
            try:
                await bot.send_message(ret, f"{data['mess']}")
            except:
                cur.execute(f"DELETE FROM users WHERE call = {ret}")
                base.commit()
                continue

    await bot.send_message(message.chat.id, f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", reply_markup=kb_for_admin())
    await state.finish()

async def adminall(callback:types.CallbackQuery,state:FSMContext):
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "newslike":
        await bot.send_message(callback.from_user.id,f"–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏")
        await AdminMessageAll.mess.set()
    if str == "quest":
        await bot.send_message(callback.from_user.id,f"–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        await FromAdmin.message.set()

async def fromadmin(message:types.Message,state:FSMContext):
    async with state.proxy() as data:
        data['message'] = message.text
        for (ret,) in cur.execute(f"SELECT call FROM users WHERE call != '{message.chat.id}'"):
        #for (ret,) in cur.execute(f"SELECT call FROM users"):
            try:
                await bot.send_message(ret,f"{data['message']}")
                await FromAdmin.toadminmess.set()
            except:
                continue

async def toadminmess(message:types.Message,state:FSMContext):
    async with state.proxy() as data:
        data['toadminmess'] = message.text
        mes = data['toadminmess']
        await bot.send_message(message.chat.id,f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª–∏!",reply_markup=kb_answer1)
        await bot.send_message(CHAT_ID,f"Data: {datetime.date.today()}\n\nCallback: {message.chat.id}\n\nLink: @{message.from_user.username}\n\nFrom Admin Message: {data['message']}\n\nMessage From User: {mes}")
    await state.finish()



#for admin like and diss

async def calllike(callback:types.CallbackQuery,state:FSMContext):
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "like":
        await state.finish()
        await bot.delete_message(callback.from_user.id, callback.message.message_id)
        await bot.send_message(callback.from_user.id,f"–ü–æ–Ω—è–ª–∞!\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",reply_markup=kb_answer1)
        await bot.send_message(CHAT_ID,f"Data: {datetime.date.today()}\n\nCallback: {callback.from_user.id}\n\nLink: @{callback.from_user.username}\n\nSet: üëç")
    if str == "diss":
        await state.finish()
        await bot.delete_message(callback.from_user.id, callback.message.message_id)
        await bot.send_message(callback.from_user.id, f"–ü–æ–Ω—è–ª–∞!\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=kb_answer1)
        await bot.send_message(CHAT_ID,
                               f"Data: {datetime.date.today()}\n\nCallback: {callback.from_user.id}\n\nLink: @{callback.from_user.username}\n\nSet: üëé")



async def groupbudb(callback:types.CallbackQuery,state:FSMContext):
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "reg":
        async with state.proxy() as data:
            data['group'] = "reg"
        await bot.send_message(callback.from_user.id,f"–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        await ForGroupByDb.message.set()
    if str == "net":
        async with state.proxy() as data:
            data['group'] = "net"
        await bot.send_message(callback.from_user.id, f"–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        await ForGroupByDb.message.set()
    if str == "vac":
        async with state.proxy() as data:
            data['group'] = "vac"
        await bot.send_message(callback.from_user.id, f"–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        await ForGroupByDb.message.set()
    if str == "uslugi":
        async with state.proxy() as data:
            data['group'] = "uslugi"
        await bot.send_message(callback.from_user.id, f"–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        await ForGroupByDb.message.set()
    if str == "news":
        async with state.proxy() as data:
            data['group'] = "news"
        await bot.send_message(callback.from_user.id, f"–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        await ForGroupByDb.message.set()

async def messageforgroupbydb(message:types.Message,state:FSMContext):
    async with state.proxy() as data:
        data['message'] = message.text
        if data['group'] == "reg":
            for (ret,) in cur.execute(f"SELECT call FROM users WHERE name IS NULL OR spec IS NULL"):
                try:
                    await bot.send_message(ret, f"{data['message']}")
                except:
                    cur.execute(f"DELETE FROM users WHERE call = {ret}")
                    base.commit()
                    continue
        if data['group'] == "net":
            for (ret,) in cur.execute(f"SELECT call FROM for_network WHERE kolnetwork IS NULL"):
                try:
                    await bot.send_message(ret, f"{data['message']}")
                except:
                    cur.execute(f"DELETE FROM for_network WHERE call = {ret}")
                    base.commit()
                    continue
        if data['group'] == "vac":
            for (ret,) in cur.execute(f"SELECT call FROM for_network WHERE kolvac IS NULL"):
                try:
                    await bot.send_message(ret, f"{data['message']}")
                except:
                    cur.execute(f"DELETE FROM for_network WHERE call = {ret}")
                    base.commit()
                    continue
        if data['group'] == "uslugi":
            for (ret,) in cur.execute(f"SELECT call FROM users WHERE call NOT IN (SELECT call FROM myResume)"):
                try:
                    await bot.send_message(ret, f"{data['message']}")
                except:
                    cur.execute(f"DELETE FROM users WHERE call = {ret}")
                    base.commit()
                    continue
        if data['group'] == "news":
            for (ret,) in cur.execute(f"SELECT call FROM for_network WHERE kolnews IS NULL"):
                try:
                    await bot.send_message(ret, f"{data['message']}")
                except:
                    cur.execute(f"DELETE FROM for_network WHERE call = {ret}")
                    base.commit()
                    continue
    await bot.send_message(message.chat.id,f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",reply_markup=kb_for_admin())
    await state.finish()



#########admin close
async def start(message:types.Message,state: FSMContext):
    # lora_bot.user(message.chat.id,'ru')
    # lora_bot.message("/start",message.chat.id,'ru')
    reg = cur.execute(f"SELECT call FROM users WHERE call = {message.chat.id}").fetchone()
    base.commit()
    print(reg)
    if reg == None:

        cur.execute(f"INSERT INTO for_network(call) VALUES('{message.chat.id}')")
        base.commit()
        await User.name.set()
        await bot.send_message(message.chat.id,
                               f"–ü—Ä–∏–≤–µ—Ç {emojize(':heart_exclamation:')}\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞–π—è, —è - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –º–æ–¥–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞.\n–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É, —á–µ–º –±—É–¥—É –ø–æ–ª–µ–∑–Ω–∞.\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é")
        star_start = cur.execute(f"SELECT call FROM statistic_start WHERE call = {message.chat.id}").fetchone()
        print(star_start)
        if star_start == None:
            dat = datetime.date.today()
            cur.execute(f"INSERT INTO statistic_start(datatime,call,kol) VALUES('{dat}','{message.chat.id}',1)")
            base.commit()
        else:
            (spec,) = cur.execute(f"SELECT spec FROM users WHERE call = '{message.chat.id}'").fetchone()
            cur.execute(f"UPDATE statistic_start SET kol = kol + 1 WHERE call = '{message.chat.id}'")
            base.commit()
            cur.execute(f"UPDATE statistic_start SET spec = '{spec}' WHERE call = '{message.chat.id}'")
            base.commit()
    else:
        star_start = cur.execute(f"SELECT call FROM statistic_start WHERE call = {message.chat.id}").fetchone()
        print(star_start)
        if star_start == None:
            dat = datetime.date.today()
            cur.execute(f"INSERT INTO statistic_start(datatime,call,kol) VALUES('{dat}','{message.chat.id}',1)")
            base.commit()
        else:
            (spec,) = cur.execute(f"SELECT spec FROM users WHERE call = '{message.chat.id}'").fetchone()
            cur.execute(f"UPDATE statistic_start SET kol = kol + 1 WHERE call = '{message.chat.id}'")
            base.commit()
            cur.execute(f"UPDATE statistic_start SET spec = '{spec}' WHERE call = '{message.chat.id}'")
            base.commit()
        cur.execute(f"UPDATE for_network SET call ='{message.chat.id}' WHERE call = '{message.chat.id}'")
        base.commit()
        await main(message)





async def name(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['datatime'] = datetime.date.today()
    async with state.proxy() as data:
        data['call'] = message.chat.id

    async with state.proxy() as data:
        data['link'] = message.from_user.username

    async with state.proxy() as data:
        data['name'] = message.text
    await bot.send_message(message.chat.id,f"–ö–∞–∫–æ–µ —É —Ç–µ–±—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",reply_markup=kb_spec)
    await User.spec.set()

async def spec(callback:types.CallbackQuery,state: FSMContext):
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "stylist":
        async with state.proxy() as data:
            data['spec'] = "–°—Ç–∏–ª–∏—Å—Ç"
        await sql_add_command(state)
        await state.finish()
        await bot.send_message(callback.from_user.id,
                               f"–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º—ã –±—É–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.\n\n–í –∫–∞–∂–¥–æ–º –∏–∑ –Ω–∏—Ö —Ç–µ–±—è –∂–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.\n\n–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?",
                               reply_markup=kb_answer1)
        #await User.write_about.set()
        #await bot.send_message(callback.from_user.id,
                              # f"–ß–µ–º —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥—Ä—É–≥–∏–º?")
    if str == "designer":
        async with state.proxy() as data:
            data['spec'] = "–î–∏–∑–∞–π–Ω–µ—Ä"
        await sql_add_command(state)
        await state.finish()
        await bot.send_message(callback.from_user.id,
                               f"–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º—ã –±—É–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.\n\n–í –∫–∞–∂–¥–æ–º –∏–∑ –Ω–∏—Ö —Ç–µ–±—è –∂–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.\n\n–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?",
                               reply_markup=kb_answer1)
        #await User.write_about.set()
        #await bot.send_message(callback.from_user.id,
                               #f"–ß–µ–º —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥—Ä—É–≥–∏–º?")
    if str == "ProductionOwner":
        async with state.proxy() as data:
            data['spec'] = "–í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"
        await sql_add_command(state)
        await state.finish()
        await bot.send_message(callback.from_user.id,
                               f"–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º—ã –±—É–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.\n\n–í –∫–∞–∂–¥–æ–º –∏–∑ –Ω–∏—Ö —Ç–µ–±—è –∂–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.\n\n–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?",
                               reply_markup=kb_answer1)
        #await User.write_about.set()
        #await bot.send_message(callback.from_user.id,
                              # f"–ß–µ–º —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥—Ä—É–≥–∏–º?")

    if str == "Marketing":
        async with state.proxy() as data:
            data['spec'] = "–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, HR, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏ —Ç.–ø."
        await sql_add_command(state)
        await state.finish()
        await bot.send_message(callback.from_user.id,
                               f"–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º—ã –±—É–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.\n\n–í –∫–∞–∂–¥–æ–º –∏–∑ –Ω–∏—Ö —Ç–µ–±—è –∂–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.\n\n–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?",
                               reply_markup=kb_answer1)
        #await User.write_about.set()
        #await bot.send_message(callback.from_user.id,
                               #f"–ß–µ–º —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥—Ä—É–≥–∏–º?")

    if str == "BrandOwner":
        async with state.proxy() as data:
            data['spec'] = "–í–ª–∞–¥–µ–ª–µ—Ü –±—Ä–µ–Ω–¥–∞"
        await sql_add_command(state)
        await state.finish()
        await bot.send_message(callback.from_user.id,
                               f"–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º—ã –±—É–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.\n\n–í –∫–∞–∂–¥–æ–º –∏–∑ –Ω–∏—Ö —Ç–µ–±—è –∂–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.\n\n–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?",
                               reply_markup=kb_answer1)
        #await User.write_about.set()
        #await bot.send_message(callback.from_user.id,
                               #f"–ß–µ–º —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥—Ä—É–≥–∏–º?")

    if str == "constructor":
        async with state.proxy() as data:
            data['spec'] = "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä"
        await sql_add_command(state)
        await state.finish()
        await bot.send_message(callback.from_user.id,
                               f"–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º—ã –±—É–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.\n\n–í –∫–∞–∂–¥–æ–º –∏–∑ –Ω–∏—Ö —Ç–µ–±—è –∂–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.\n\n–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?",
                               reply_markup=kb_answer1)
        #await User.write_about.set()
        #await bot.send_message(callback.from_user.id,
                               #f"–ß–µ–º —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥—Ä—É–≥–∏–º?")

    if str == "bayer":
        async with state.proxy() as data:
            data['spec'] = "–ë–∞–π–µ—Ä"
        await sql_add_command(state)
        await state.finish()
        await bot.send_message(callback.from_user.id,
                               f"–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º—ã –±—É–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.\n\n–í –∫–∞–∂–¥–æ–º –∏–∑ –Ω–∏—Ö —Ç–µ–±—è –∂–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.\n\n–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?",
                               reply_markup=kb_answer1)
        #await User.write_about.set()
        #await bot.send_message(callback.from_user.id,
                               #f"–ß–µ–º —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥—Ä—É–≥–∏–º?")

    if str == "boutiqueOwner":
        async with state.proxy() as data:
            data['spec'] = "–í–ª–∞–¥–µ–ª–µ—Ü –±—É—Ç–∏–∫–∞"
        await sql_add_command(state)
        await state.finish()
        await bot.send_message(callback.from_user.id,
                               f"–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º—ã –±—É–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.\n\n–í –∫–∞–∂–¥–æ–º –∏–∑ –Ω–∏—Ö —Ç–µ–±—è –∂–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.\n\n–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?",
                               reply_markup=kb_answer1)
        #await User.write_about.set()
        #await bot.send_message(callback.from_user.id,
                               #f"–ß–µ–º —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥—Ä—É–≥–∏–º?")

    if str == "MyAnswer":
        await bot.send_message(callback.from_user.id,f"–ù–∞–ø–∏—à–∏ —Å–≤–æ–π —Ç–∏–ø –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")

async def MySpec(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['spec'] = message.text
    await sql_add_command(state)
    await state.finish()
    await bot.send_message(message.chat.id,
                           f"–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º—ã –±—É–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.\n\n–í –∫–∞–∂–¥–æ–º –∏–∑ –Ω–∏—Ö —Ç–µ–±—è –∂–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.\n\n–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?",
                           reply_markup=kb_answer1)
    #await User.write_about.set()
    #await bot.send_message(message.chat.id,f"–ß–µ–º —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥—Ä—É–≥–∏–º?")

async def WriteAbout(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['write_about'] = message.text

    await bot.send_message(message.chat.id,
                           f"–û—Ç–ª–∏—á–Ω–æ!\n–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")
    await User.city.set()

async def city(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text
        cur.execute(f"UPDATE users SET city = '{data['city']}' WHERE call = '{message.chat.id}'")
        base.commit()

    await bot.send_message(message.chat.id,
                           f"–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –ª—é–±–æ–π —Å–æ—Ü. —Å–µ—Ç–∏, –≥–¥–µ –µ—Å—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ üë©‚ÄçüöÄ.\n\n\
–¢–∞–∫ –≤—ã –≤ –ø–∞—Ä–µ —Å–º–æ–∂–µ—Ç–µ –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –¥—Ä—É–≥ –æ –¥—Ä—É–≥–µ –¥–æ –≤—Å—Ç—Ä–µ—á–∏.")
    await User.soclink.set()

async def soclink(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['soclink'] = message.text
        cur.execute(f"UPDATE users SET soclink = '{data['soclink']}' WHERE call = '{message.chat.id}'")
        base.commit()

    await bot.send_message(message.chat.id,
                     f"–í –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –∏ –∫–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ä–æ–ª—å?\n\n–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É. \n\
–ï—Å–ª–∏ –Ω–∞ —Å–µ–±—è/—Å—Ç—Ä–æ–∏—à—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å ‚Äì —ç—Ç–æ —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è)")
    await User.company.set()

async def company(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['company'] = message.text
        cur.execute(f"UPDATE users SET company = '{data['company']}' WHERE call = '{message.chat.id}'")
        base.commit()

    await bot.send_message(message.chat.id,
                           f"–ß–µ–º –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É?")
    await User.clever.set()

# async def role(message:types.Message,state: FSMContext):
#     async with state.proxy() as data:
#         data['role'] = message.text
#
#     await bot.send_message(message.chat.id,
#                            f"–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –≤ –¥–≤—É—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö:")
#     await User.clever.set()

async def clever(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['clever'] = message.text
        cur.execute(f"UPDATE users SET clever = '{data['clever']}' WHERE call = '{message.chat.id}'")
        base.commit()
    await state.finish()
    await bot.send_message(message.chat.id,
                           f"–ü–æ–ª—É—á–∏–ª–æ—Å—å! üôå\n–¢–µ–ø–µ—Ä—å —Ç—ã ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫ –≤—Å—Ç—Ä–µ—á ‚òï \n–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n\
1. –°–≤–æ—é –ø–∞—Ä—É –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ —Ç—ã –±—É–¥–µ—à—å —É–∑–Ω–∞–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n\
–ù–∞–ø–∏—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—É –≤ Telegram, —á—Ç–æ–±—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –≤—Å—Ç—Ä–µ—á–µ –∏–ª–∏ –∑–≤–æ–Ω–∫–µ.\n\n\
–í—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å–∞–º–∏.",reply_markup=kb_go_next1)

async def gonext1(callback:types.CallbackQuery,state: FSMContext):
    await bot.answer_callback_query(callback.id)
    await bot.send_message(callback.from_user.id,
                           f"2. –í –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏ —è —Å–ø—Ä–æ—à—É: —É—á–∞—Å—Ç–≤—É–µ—à—å –ª–∏ —Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ –∏ –∫–∞–∫ –ø—Ä–æ—à–ª–∞ —Ç–≤–æ—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è –≤—Å—Ç—Ä–µ—á–∞. (–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å–º–æ–∂–µ—à—å –≤–∑—è—Ç—å –ø–∞—É–∑—É)\n\n3. –ü–∏—à–∏ –≤ —ç—Ç–æ—Ç —á–∞—Ç https://t.me/maya_mono, –µ—Å–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (—è –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ –Ω–æ–≤—É—é –ø–∞—Ä—É –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏), –∞ —Ç–∞–∫–∂–µ –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è –≤–æ –≤—Å—Ç—Ä–µ—á–∞—Ö –∏–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.", reply_markup=kb_go_next2)

async def gonext2(callback:types.CallbackQuery,state: FSMContext):
    await bot.answer_callback_query(callback.id)
    await bot.send_message(callback.from_user.id,f"–•–æ—Ä–æ—à–∏—Ö –≤—Å—Ç—Ä–µ—á! ‚òï\n\n–ü–æ–π–¥–µ–º –¥–∞–ª—å—à–µ?",reply_markup=kb_answer1)

async def gonext3(callback:types.CallbackQuery,state: FSMContext):
    await bot.answer_callback_query(callback.id)
    await bot.send_message(callback.from_user.id,f"–ö–∞–∫–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏—â–µ–º?",reply_markup=kb_of_send_vack)
    await FindIspoln.who.set()

async def sendVack(callback:types.CallbackQuery,state: FSMContext):
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "shtat":
        async with state.proxy() as data:
            data['who'] = "–í —à—Ç–∞—Ç, –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–∫—É"
        await bot.send_message(callback.from_user.id,f"–ü–æ–Ω—è–ª–∞! –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n#–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ_–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤ ¬´–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏¬ª\n–†–∞–∑–º–µ—Ä –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è\n–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n–£—Å–ª–æ–≤–∏—è:\n–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞:")
        await FindIspoln.describe.set()
    if str == "project":
        async with state.proxy() as data:
            data['who'] = "–ù–∞ –ø—Ä–æ–µ–∫—Ç–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
        await bot.send_message(callback.from_user.id, f"–ü–æ–Ω—è–ª–∞! –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n#–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ_–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤ ¬´–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏¬ª\n–†–∞–∑–º–µ—Ä –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è\n–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n–£—Å–ª–æ–≤–∏—è:\n–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞:")
        await FindIspoln.describe.set()
    if str == "ones":
        async with state.proxy() as data:
            data['who'] = "–ù–∞ —Ä–∞–∑–æ–≤—É—é —É—Å–ª—É–≥—É"
        await bot.send_message(callback.from_user.id, f"–ü–æ–Ω—è–ª–∞! –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n#–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ_–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤ ¬´–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏¬ª\n–†–∞–∑–º–µ—Ä –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è\n–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n–£—Å–ª–æ–≤–∏—è:\n–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞:")
        await FindIspoln.describe.set()

async def describeispoln(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['describe'] = message.text
        sqlite_insert = """INSERT INTO findispoln(datatime,call,link,who,describe) VALUES(?,?,?,?,?)"""
        data_insert = (datetime.date.today(),message.chat.id,message.from_user.username, data['who'],data['describe'])
        cur.execute(sqlite_insert, data_insert)
        base.commit()
    await state.finish()
    await bot.send_message(message.chat.id,f"–û—Ç–ª–∏—á–Ω–æ, —É–∂–µ –∏—â—É! –Ø —Å–∞–º–∞ –ø—Ä–æ–≤–µ–¥—É –ø–µ—Ä–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –∏ –ø–µ—Ä–µ–¥–∞–º —Ç–µ–±–µ —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.",reply_markup=kb_thankyou)



async def helpMe(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['q_help'] = message.text

    await bot.send_message(message.chat.id,
                           f"–≠—Ç–æ –∑–¥–æ—Ä–æ–≤–æ! –¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –¥–æ–≤–µ—Ä–∏—Ç—å –º–Ω–µ —Ä–µ—à–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n\n–°–µ–π—á–∞—Å –º–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:",reply_markup=kb_answer1)

    await sql_add_command(state)
    await state.finish()

async def main(message: types.Message):
    await bot.send_message(message.chat.id,
                           f"–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                           reply_markup=kb_answer1)






async def networking(callback:types.CallbackQuery,state: FSMContext):
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "networks":
        # (dat,) = cur.execute(f"SELECT datatime FROM users WHERE call = {callback.from_user.id}").fetchone()
        # print(dat)
        #if (datetime.date.today() - datetime.timedelta(days=7)) > datetime.datetime.strptime(dat,"%Y-%m-%d").date():
        # (kolnet,) = cur.execute(f"SELECT kolnetwork FROM for_network WHERE call = '{callback.from_user.id}'").fetchone()
        # base.commit()
        kolnet = cur.execute(
            f"SELECT kolnetwork FROM for_network WHERE call = '{callback.from_user.id}'").fetchone()
        base.commit()
        print(kolnet)
        if kolnet == (None,):
            cur.execute(
                f"UPDATE for_network SET kolnetwork = 1 WHERE call = '{callback.from_user.id}'")
            base.commit()
            await bot.send_message(callback.from_user.id,
                                   f"–ü—Ä–µ–¥–ª–∞–≥–∞—é —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —É–¥–æ–±–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤, –æ–±–º–µ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∏ –æ–ø—ã—Ç–æ–º —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –ø–æ —Ü–µ—Ö—É.\n\n–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —è –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–µ–±–µ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –û –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–µ –≤—ã –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç–µ—Å—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–æ—á–∏—Ç–∞–π –∫–æ—Ä–æ—Ç–∫—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.",
                                   reply_markup=kb_ready_networking)

        elif datetime.datetime.today().weekday() == 4: #0
            # cur.execute(f"UPDATE for_network SET try_connect = 'open' WHERE call = {callback.from_user.id}")
            # base.commit()
            await bot.send_message(callback.from_user.id,
                                   f"–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –≤ –Ω–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã, –ø–æ—ç—Ç–æ–º—É —è —Ä–µ—à–∏–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—Å–µ–º –¥–µ—è—Ç–µ–ª—è–º –º–æ–¥–Ω–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –≥–∏–±–∫–∏–π –∏ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"
                                   f"{emojize(':recycling_symbol:')} –ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —è –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–µ–±–µ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. –û –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–µ –≤—ã –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç–µ—Å—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.\n\n"
                                   f"{emojize(':check_mark_button:')} –í –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏ —è —Å–ø—Ä–æ—à—É: —É—á–∞—Å—Ç–≤—É–µ—à—å –ª–∏ —Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ –∏ –∫–∞–∫ –ø—Ä–æ—à–ª–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –≤—Å—Ç—Ä–µ—á–∞.\n\n"
                                   f"{emojize(':cross_mark_button:')} –ï—Å–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç ‚Äì –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –∏ —è –ø–æ–¥–±–µ—Ä—É –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è –∏–ª–∏ –≤–∑—è—Ç—å –ø–∞—É–∑—É –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n\n"
                                   f"–£—á–∞—Å—Ç–≤—É–µ—à—å?", reply_markup=kb_answer2)




        elif(datetime.datetime.today().weekday() != 4 and kolnet!=None):
            await bot.send_message(callback.from_user.id,
                                   f"–¢–≤–æ—è –ø–∞—Ä–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é —Å—Ç–∞–Ω–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω–∞ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫. –ù–µ–º–Ω–æ–≥–æ —Ç–µ—Ä–ø–µ–Ω–∏—è ü§è",
                                   reply_markup=kb_answer1)
            # call = cur.execute(f"SELECT call FROM nextgo WHERE call = '{callback.from_user.id}'").fetchone()
            # print(f"cal == {call}")
            # if call == None:
            #     scheduler.add_job(message2days, "cron", day_of_week='thu', hour=19, minute=59,
            #                       args=(callback.from_user.id, dp,))
            #     await bot.send_message(callback.from_user.id,
            #                            f"–¢–≤–æ—è –ø–∞—Ä–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é —Å—Ç–∞–Ω–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω–∞ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫. –ù–µ–º–Ω–æ–≥–æ —Ç–µ—Ä–ø–µ–Ω–∏—è ü§è",
            #                            reply_markup=kb_answer1)
            # else:

            # cur.execute(f"UPDATE for_network SET try_connect = 'close' WHERE call = {callback.from_user.id}")
            # base.commit()

        # con1 = cur.execute(f"SELECT try_connect FROM for_network WHERE call = {callback.from_user.id}").fetchone()
        # base.commit()
        # con = ''
        # if con1 == None:
        #     con = None
        #     cur.execute(f"UPDATE for_network SET kolnetwork = 0 WHERE call = {callback.from_user.id}")
        #     base.commit()
        #
        # else:
        #     (con,) = con1
        #
        # if con == None or con == "open":
        #
        #     await bot.send_message(callback.from_user.id,
        #                            f"–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –≤ –Ω–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã, –ø–æ—ç—Ç–æ–º—É —è —Ä–µ—à–∏–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—Å–µ–º –¥–µ—è—Ç–µ–ª—è–º –º–æ–¥–Ω–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –≥–∏–±–∫–∏–π –∏ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"
        #                            f"{emojize(':recycling_symbol:')} –ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —è –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–µ–±–µ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. –û –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–µ –≤—ã –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç–µ—Å—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.\n\n"
        #                            f"{emojize(':check_mark_button:')} –í –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏ —è —Å–ø—Ä–æ—à—É: —É—á–∞—Å—Ç–≤—É–µ—à—å –ª–∏ —Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ –∏ –∫–∞–∫ –ø—Ä–æ—à–ª–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –≤—Å—Ç—Ä–µ—á–∞.\n\n"
        #                            f"{emojize(':cross_mark_button:')} –ï—Å–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç ‚Äì –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –∏ —è –ø–æ–¥–±–µ—Ä—É –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è –∏–ª–∏ –≤–∑—è—Ç—å –ø–∞—É–∑—É –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n\n"
        #                            f"–£—á–∞—Å—Ç–≤—É–µ—à—å?", reply_markup=kb_answer2)
        #     cur.execute(f"UPDATE users SET datatime = '{datetime.date.today()}' WHERE call = {callback.from_user.id}")
        #     base.commit()
        # if con == "close":
        #     await bot.send_message(callback.from_user.id,f"–í –Ω–µ–¥–µ–ª—é –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞. –î–æ–∂–¥–∏—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞",reply_markup=kb_answer1)


    if str == "news":
        call = cur.execute(f"SELECT call FROM for_network WHERE call = '{callback.from_user.id}'").fetchone()
        base.commit()
        if call == None:
            cur.execute(f"INSERT INTO for_network(call) VALUES('{callback.from_user.id}')")
            base.commit()
        (kolnews,) = cur.execute(f"SELECT kolnews FROM for_network WHERE CALL = '{callback.from_user.id}'").fetchone()
        base.commit()
        print(kolnews)
        if kolnews == None:
            await bot.send_message(callback.from_user.id,
                                   f"–•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ‚ú®\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –¥–µ—Å—è—Ç–∫–æ–≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–µ —É—Å–ø–µ–≤–∞–µ—à—å —Ä–∞–∑–±–∏—Ä–∞—Ç—å, –∏ –Ω–∏ –æ–¥–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å –Ω–µ –ø—Ä–æ–π–¥–µ—Ç –º–∏–º–æ —Ç–µ–±—è, –æ–±–µ—â–∞—é‚ùó\n\n\
–Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –±–æ–ª–µ–µ 100 —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å–æ—Ä—Ç–∏—Ä—É—é –∏—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π, –æ–ø—ã—Ç–∞ –∏ –ø—Ä–∏—Å—ã–ª–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–¥–±–æ—Ä–∫–∏ —Ä–∞–∑ –≤ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é –∏ –º–µ—Å—è—Ü —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º—ã—Å–ª—è–º–∏ –∏ —Ç–µ–∑–∏—Å–∞–º–∏.\n\n\
–ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–æ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞ –∏ –∑–∞–≤–∞–ª–æ–≤ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ, —Ç–æ–ª—å–∫–æ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üòå",
                                   reply_markup=kb_greatmeropr)
            cur.execute(f"UPDATE for_network SET kolnews = 1 WHERE call = '{callback.from_user.id}'")
            base.commit()
        else:
            non = cur.execute(f"SELECT call FROM poshelania WHERE call = {callback.from_user.id}").fetchone()
            base.commit()
            if non == None:
                await bot.send_message(callback.from_user.id,
                                       f"–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã?")
                await Poshelania.ans.set()
            else:
                await bot.send_message(callback.from_user.id,
                                       f"–ß—Ç–æ —Ö–æ—á–µ—Ç—Å—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?",
                                       reply_markup=kb_parser)





    if str == "ispoln":
        call = cur.execute(f"SELECT call FROM for_network WHERE CALL = '{callback.from_user.id}'").fetchone()
        base.commit()
        if call == None:
            cur.execute(f"INSERT INTO for_network(call) VALUES('{callback.from_user.id}')")
            base.commit()
        (kolvac,) = cur.execute(f"SELECT kolvac FROM for_network WHERE CALL = '{callback.from_user.id}'").fetchone()
        base.commit()
        print(kolvac)
        if kolvac == None:
            await bot.send_message(callback.from_user.id,f"–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ª—é–±–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —à—Ç–∞—Ç, –Ω–∞ –ø—Ä–æ–µ–∫—Ç–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ —Ä–∞–∑–æ–≤—É—é —É—Å–ª—É–≥—É.",reply_markup=kb_go_next3)
            cur.execute(f"UPDATE for_network SET kolvac = 1 WHERE call = '{callback.from_user.id}'")
            base.commit()
        else:
            await bot.send_message(callback.from_user.id, f"–ö–∞–∫–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏—â–µ–º?", reply_markup=kb_of_send_vack)
            await FindIspoln.who.set()

    if str == "my":
        await bot.send_message(callback.from_user.id,
                               f"–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–∏–µ —É—Å–ª—É–≥–∏ —Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—à—å?")
        await My.what.set()

    if str == "helpme":
        (name,) = cur.execute(f"SELECT name FROM users WHERE call = '{callback.from_user.id}'").fetchone()
        base.commit()
        call = cur.execute(f"SELECT call FROM for_network WHERE CALL = '{callback.from_user.id}'").fetchone()
        base.commit()
        if call == None:
            cur.execute(f"INSERT INTO for_network(call) VALUES('{callback.from_user.id}')")
            base.commit()
        (kolhelp,) = cur.execute(f"SELECT kolhelp FROM for_network WHERE CALL = '{callback.from_user.id}'").fetchone()
        base.commit()
        print(kolhelp)
        if kolhelp == None:
            await bot.send_message(callback.from_user.id,
                                   f"–ü—Ä–∏–≤–µ—Ç, {name}!\n\
–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å, —Å –∫–æ—Ç–æ—Ä—ã–º —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å–µ, —á—Ç–æ —Å–≤—è–∑–∞–Ω–Ω–æ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\
‚Äì –ù–∞–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ;\n\
‚Äì –ù–∞–π—Ç–∏ —Å—Ç–∏–ª–∏—Å—Ç–∞ –¥–ª—è —Å—ä–µ–º–∫–∏;\n\
‚Äì –ù–∞–π—Ç–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤;\n\
‚Äì –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.\n–ê —è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —ç—Ç–∏–º. –ü–æ–ø—Ä–æ–±—É–µ–º?",reply_markup=kb_helpMaya)
            cur.execute(f"UPDATE for_network SET kolhelp = 1 WHERE call = '{callback.from_user.id}'")
            base.commit()
        else:
            await bot.send_message(callback.from_user.id,f"–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å?",reply_markup=kb_helpMaya)

    if str == "AI":
        user = cur.execute(f"SELECT call FROM botGPT WHERE call = '{callback.from_user.id}'").fetchone() #None
        print(user)
        if user == None:
            sqlite_insert = """INSERT INTO botGPT(datatime,call,link,kol,dostup) VALUES(?,?,?,?,?)"""
            data_insert = (
                datetime.date.today(), callback.from_user.id, callback.from_user.username, 5,'test')
            cur.execute(sqlite_insert, data_insert)
            base.commit()
            await bot.send_message(callback.from_user.id,
                                   f"–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É!\n\n"
                                   f"‚Äì 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n‚Äì 20 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å 349 —Ä—É–±/–º–µ—Å\n‚Äì 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å 649 —Ä—É–±/–º–µ—Å\n‚Äì ‚àû —á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –¥–µ–Ω—å 1490 —Ä—É–±/–º–µ—Å\n\n–ù–∞—á–∏–Ω–∞–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n–£—á—Ç–∏, —á—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –∏ "
                                       f"–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∏–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞—Ç—å. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ - –Ω–∞–∂–º–∏ –Ω–∞ /stop\n\n–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å:")
            await IIbot.start.set()
        else:
            (dostup,) = cur.execute(f"SELECT dostup FROM botGPT WHERE call = '{callback.from_user.id}'").fetchone()
            if dostup == "test":
                (kol,) = cur.execute(f"SELECT kol FROM botGPT WHERE call = '{callback.from_user.id}'").fetchone()
                if int(kol) <= 0:
                    await bot.send_message(callback.from_user.id,f"–¢–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å :(\n‚Äì 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n‚Äì 20 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å 349 —Ä—É–±/–º–µ—Å\n‚Äì 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å 649 —Ä—É–±/–º–µ—Å\n‚Äì ‚àû —á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –¥–µ–Ω—å 1490 —Ä—É–±/–º–µ—Å\n\n–ó–∞–≤—Ç—Ä–∞ —Ç–≤–æ–π –¥–æ—Å—Ç—É–ø –æ–±–Ω–æ–≤–∏—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞—Ä–∏—Ñ—É!\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ - –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @maya_mono",reply_markup=kb_answer1)
                else:
                    await bot.send_message(callback.from_user.id,
                                           f"–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É!\n\n–ù–∞—á–∏–Ω–∞–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n–£—á—Ç–∏, —á—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –∏ "
                                       f"–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∏–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞—Ç—å. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ - –Ω–∞–∂–º–∏ –Ω–∞ /stop\n\n–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å:")
                    await IIbot.start.set()
            if dostup == "min":
                (kol,) = cur.execute(f"SELECT kol FROM botGPT WHERE call = '{callback.from_user.id}'").fetchone()
                if int(kol) <= 0:
                    await bot.send_message(callback.from_user.id,
                                           f"–¢–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å :(\n‚Äì 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n‚Äì 20 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å 349 —Ä—É–±/–º–µ—Å\n‚Äì 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å 649 —Ä—É–±/–º–µ—Å\n‚Äì ‚àû —á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –¥–µ–Ω—å 1490 —Ä—É–±/–º–µ—Å\n\n–ó–∞–≤—Ç—Ä–∞ —Ç–≤–æ–π –¥–æ—Å—Ç—É–ø –æ–±–Ω–æ–≤–∏—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞—Ä–∏—Ñ—É!\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ - –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @maya_mono",
                                           reply_markup=kb_answer1)
                else:
                    await bot.send_message(callback.from_user.id,
                                           f"–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É!\n\n–ù–∞—á–∏–Ω–∞–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n–£—á—Ç–∏, —á—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –∏ "
                                       f"–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∏–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞—Ç—å. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ - –Ω–∞–∂–º–∏ –Ω–∞ /stop\n\n–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å:")
                    await IIbot.start.set()
            if dostup == "med":
                (kol,) = cur.execute(f"SELECT kol FROM botGPT WHERE call = '{callback.from_user.id}'").fetchone()
                if int(kol) <= 0:
                    await bot.send_message(callback.from_user.id,
                                           f"–¢–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å :(\n‚Äì 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n‚Äì 20 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å 349 —Ä—É–±/–º–µ—Å\n‚Äì 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å 649 —Ä—É–±/–º–µ—Å\n‚Äì ‚àû —á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –¥–µ–Ω—å 1490 —Ä—É–±/–º–µ—Å\n\n–ó–∞–≤—Ç—Ä–∞ —Ç–≤–æ–π –¥–æ—Å—Ç—É–ø –æ–±–Ω–æ–≤–∏—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞—Ä–∏—Ñ—É!\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ - –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @maya_mono",
                                           reply_markup=kb_answer1)
                else:
                    await bot.send_message(callback.from_user.id,
                                           f"–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É!\n\n–ù–∞—á–∏–Ω–∞–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n–£—á—Ç–∏, —á—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –∏ "
                                       f"–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∏–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞—Ç—å. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ - –Ω–∞–∂–º–∏ –Ω–∞ /stop\n\n–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å:")
                    await IIbot.start.set()
            if dostup == "max":
                await bot.send_message(callback.from_user.id,
                                       f"–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É!\n\n–ù–∞—á–∏–Ω–∞–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n–£—á—Ç–∏, —á—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –∏ "
                                       f"–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∏–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞—Ç—å. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ - –Ω–∞–∂–º–∏ –Ω–∞ /stop\n\n–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å:")
                await IIbot.start.set()










async def readyNetworking(callback:types.CallbackQuery,state: FSMContext):
    await bot.answer_callback_query(callback.id)
    await bot.send_message(callback.from_user.id,
                           f"–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞? {emojize(':cityscape:')}\n\n\
–í—ã —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –º–æ–∂–µ—Ç–µ –æ–∫–∞–∑–∞—Ç—å—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö ‚Äì —Ç–æ–≥–¥–∞ –≤–∞–º –ø–æ–¥–æ–π–¥–µ—Ç –æ–Ω–ª–∞–π–Ω —Ñ–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á–∏ üë®‚Äçüíª\n\n\
–ï—Å–ª–∏ –≤—ã –∏–∑ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ ‚Äì —Å–º–æ–∂–µ—Ç–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –≤–∂–∏–≤—É—é ü§ù",reply_markup=kb_back1)
    await User.city.set()


async def poshelaniaMessage(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['datatime'] = datetime.date.today()
        data['call'] = message.chat.id
        data['poshelania'] = message.text
        data['link'] = message.from_user.url

    await bot.send_message(message.chat.id,
                           f"–ü–æ–Ω—è–ª–∞, —Å–ø–∞—Å–∏–±–æ! –° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?",reply_markup=kb_parser)
    await sql_add_poshelania(state)
    await state.finish()




async def networkingAnswer(callback:types.CallbackQuery,state: FSMContext):
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "question":
        await bot.send_message(callback.from_user.id,
                               f"–ù–∞–ø–∏—à–∏ –µ–≥–æ —Å—é–¥–∞:")
        await Question.q_from_user.set()
    if str == "yes":
        # (name,) = cur.execute(f'SELECT name FROM users  WHERE call != "{callback.from_user.id}" ORDER BY RANDOM() LIMIT 1;').fetchone()
        # base.commit()
        # print(name)
        # (namecity,) = cur.execute(f'SELECT city FROM users WHERE name = "{name}"').fetchone()
        # (companyname,) = cur.execute(f'SELECT company FROM users WHERE name = "{name}"').fetchone()
        # (rolename,) = cur.execute(f'SELECT spec FROM users WHERE name = "{name}"').fetchone()
        # (aboutname,) = cur.execute(f'SELECT clever FROM users WHERE name = "{name}"').fetchone()
        # (link,) = cur.execute(f'SELECT link FROM users WHERE name = "{name}" ').fetchone()
        # print(link)
        # base.commit()

        #await bot.send_message(callback.from_user.id, f"–¢–≤–æ—è –ø–∞—Ä–∞ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:\n\n{name} - ({namecity})\n–ü—Ä–æ—Ñ–∏–ª—å - @{link}\n–ö–æ–º–ø–∞–Ω–∏—è: {companyname}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {rolename}\n–ß–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –ø–∞—Ä—Ç–Ω–µ—Ä: {aboutname}\n\n–ù–∞–ø–∏—à–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –≤ Telegram ‚Äì @{link}\n–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π, –¥–æ–≥–æ–≤–æ—Ä–∏—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ —Å—Ä–∞–∑—É üôÇ \n\n–ë—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ –≤ –æ—Ç–≤–µ—Ç.",reply_markup=kb_answer3)
        # scheduler.add_job(messageformonday, "cron", day_of_week='fri',hour=12,minute=30, args=(callback.from_user.id, dp,))
        await bot.send_message(callback.from_user.id,f"–û—Ç–ª–∏—á–Ω–æ! –ñ–¥–∏ –æ—Ç –º–µ–Ω—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫!",reply_markup=kb_answer1)





async def networkingMessage(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['datatime'] = datetime.date.today()
        data['call'] = message.chat.id
        data['link'] = message.from_user.username
        data['name'] = message.text
        await bot.send_message(CHAT_ID,f"Data: {data['datatime']}\n\nCallback: {data['call']}\n\nLink: @{data['link']}\n\nQuestion: {data['name']}")
    await bot.send_message(message.chat.id,f"–ü–æ–Ω—è–ª–∞, —É–∂–µ —Ä–µ—à–∞—é. –°–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º")
    await sql_add_q(state)
    await main(message)
    await state.finish()

# async def message2days(callback,dp:Dispatcher):
#     await bot.send_message(callback,f"–ü—Ä–∏–≤–µ—Ç!üëã\n\n\
# –ù–∞—à–∏ –æ–Ω–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è.\n\n\
# –£—á–∞—Å—Ç–≤—É–µ—à—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ?",reply_markup=kb_days2answer1)


# async def days2answer1(callback:types.CallbackQuery):
#     await bot.answer_callback_query(callback.id)
#     str = callback.data.split("_")[1]
#     if str == "yes":
#         await bot.send_message(callback.from_user.id, f"–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è—Ö! –ö–∞–∫ –≤—Å–µ –ø—Ä–æ—à–ª–æ?")
#         await Days2message.impression.set()
#     if str == "no":
#         await bot.send_message(callback.from_user.id,
#                                f"–ü–æ—á–µ–º—É?",reply_markup=kb_days2answer2) .

async def days2answer1(callback:types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "yes":
        await bot.send_message(callback.from_user.id, f"–û—Ç–ª–∏—á–Ω–æ! –£—á–∞–≤—Å—Ç–≤—É–µ—à—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏?",reply_markup=kb_days2answer3)

    if str == "no":
        await bot.send_message(callback.from_user.id,
                               f"–ü–æ–Ω—è–ª–∞ :( \n\n–ü–æ—á–µ–º—É?",reply_markup=kb_days2answer2)

async def impression(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['datatime'] = datetime.date.today()
        data['call'] = message.chat.id
        data['impression'] = message.text
        data['link'] = message.from_user.url
    await bot.send_message(message.chat.id,
                           f"–°–ø–∞—Å–∏–±–æ! –£—á–∞—Å—Ç–≤—É–µ—à—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ?",
                           reply_markup=kb_days2answer3)
    await sql_add_impression(state)
    await state.finish()

async def days2answer3(callback:types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "yes":
        call = cur.execute(f"SELECT call FROM nextgo WHERE call = '{callback.from_user.id}'").fetchone()
        print(f"cal == {call}")
        if call == None:
            sqlite_insert = """INSERT INTO nextgo(datatime,call,name,answer) VALUES(?,?,?,?)"""
            data_insert = (
                datetime.date.today(), callback.from_user.id, callback.from_user.username, 1)
            cur.execute(sqlite_insert, data_insert)
            base.commit()
            await bot.send_message(callback.from_user.id, f"–û—Ç–ª–∏—á–Ω–æ! –ñ–¥–∏ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ :)", reply_markup=kb_answer1)
            # scheduler.add_job(messageformonday, "cron", day_of_week='mon', hour=10, minute=30,
            #                   args=(callback.from_user.id, dp,))
        else:
            cur.execute(f"UPDATE nextgo SET answer = 1 WHERE call = '{callback.from_user.id}'")
            base.commit()
            await bot.send_message(callback.from_user.id, f"–û—Ç–ª–∏—á–Ω–æ! –ñ–¥–∏ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ :)", reply_markup=kb_answer1)
            # scheduler.add_job(messageformonday, "cron", day_of_week='mon', hour=10, minute=30,
            #                   args=(callback.from_user.id, dp,))


        # (name,) = cur.execute(
        #     f'SELECT name FROM users  WHERE call != "{callback.from_user.id}" ORDER BY RANDOM() LIMIT 1;').fetchone()
        # base.commit()
        # print(name)
        # (link,) = cur.execute(f'SELECT link FROM users WHERE name = "{name}" ').fetchone()
        # print(link)
        # base.commit()
        # await bot.send_message(callback.from_user.id,
        #                        f"–¢–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é: *{name}*\n–°—Å—ã–ª–∫–∞ - {link}\n–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?",
        #                        reply_markup=kb_answer3)

    if str == "pause":
        call = cur.execute(f"SELECT call FROM nextgo WHERE call = '{callback.from_user.id}'").fetchone()
        print(f"cal == {call}")
        if call == None:
            sqlite_insert = """INSERT INTO nextgo(datatime,call,name,answer) VALUES(?,?,?,?)"""
            data_insert = (
                datetime.date.today(), callback.from_user.id, callback.from_user.username, 0)
            cur.execute(sqlite_insert, data_insert)
            base.commit()
            await bot.send_message(callback.from_user.id,
                                   f"–ü–æ–Ω—è–ª–∞ :( –Ø —Å–ø—Ä–æ—à—É –µ—â–µ —Ä–∞–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ!", reply_markup=kb_answer1)
            # scheduler.add_job(message2days, "cron", day_of_week='fri', hour=12, minute=30,
            #                   args=(callback.from_user.id, dp,))

        else:
            cur.execute(f"UPDATE nextgo SET answer = 0 WHERE call = '{callback.from_user.id}'")
            base.commit()
            await bot.send_message(callback.from_user.id,
                                   f"–ü–æ–Ω—è–ª–∞ :( –Ø —Å–ø—Ä–æ—à—É –µ—â–µ —Ä–∞–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ!", reply_markup=kb_answer1)
            # cheduler.add_job(message2days, "cron", day_of_week='fri', hour=12, minute=30,
            #                  args=(callback.from_user.id, dp,))



async def days2answer2(callback:types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    await bot.send_message(callback.from_user.id,f"–°–ø–∞—Å–∏–±–æ, —è –ø–æ–Ω—è–ª–∞. –£—á–∞–≤—Å—Ç–≤—É–µ—à—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ?",reply_markup=kb_days2answer3)

async def networkingAnswer3(callback:types.CallbackQuery,state: FSMContext):
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "question":
        await bot.send_message(callback.from_user.id,
                               f"–ù–∞–ø–∏—à–∏ –µ–≥–æ —Å—é–¥–∞:")
        await Question.q_from_user.set()
    if str == "yes":
        await bot.send_message(callback.from_user.id,f"–£–¥–∞—á–∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ—Ç–æ–º, –∫–∞–∫ –≤—Å–µ –ø—Ä–æ—à–ª–æ :)\n–ê –ø–æ–∫–∞ —á—Ç–æ –¥–∞–≤–∞–π —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –¥—Ä—É–≥–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏?",reply_markup = kb_answer1)

        #scheduler.add_job(message2days, "interval",days = 2,args = (callback.from_user.id,dp,))
        #scheduler.add_job(message2days, "cron", day_of_week='thu',hour=19,minute=59, args=(callback.from_user.id, dp,))
        # user = cur.execute(f"SELECT call FROM for_network WHERE call = {callback.from_user.id}").fetchone()
        # print(user)
        # if user == None:
        #     cur.execute(f"INSERT INTO for_network(call,try_connect) VALUES({callback.from_user.id},'close')")
        #     base.commit()



async def parserButton(callback:types.CallbackQuery,state: FSMContext):
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "news":
        await bot.send_message(callback.from_user.id,f"–í–æ—Ç —á—Ç–æ —è —Å–æ–±—Ä–∞–ª–∞ –¥–ª—è —Ç–µ–±—è:",reply_markup=kb_dop_parser(callback.from_user.id))
    if str == "meropri":
        for ret in cur.execute("SELECT img,text FROM adminAvent"):
            await bot.send_photo(callback.from_user.id, ret[0], f"\n{ret[1]}\n\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –Ω–∞–∂–º–∏ /start")

k = 1
async def dopParserButton(callback:types.CallbackQuery):
    global k
    k = 1
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "news":
        (count,)= cur.execute(f"SELECT count(text) FROM adminNewsBest").fetchone()
        base.commit()
        print("count news== ",count)
        if count == 1:
            for ret in cur.execute(f"SELECT img,text FROM adminNewsLast WHERE id = 1"):
                # await bot.send_photo(callback.from_user.id, ret[0],
                #                      f"\n{ret[1]}\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ - –Ω–∞–∂–º–∏—Ç–µ /start")
                await bot.send_message(callback.from_user.id,
                                     f"\n{ret[1]}\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ - –Ω–∞–∂–º–∏—Ç–µ /start")

        else:
            for ret in cur.execute(f"SELECT img,text FROM adminNewsLast WHERE id = 1"):
                # await bot.send_photo(callback.from_user.id, ret[0],
                #                      f"\n{ret[1]}\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ - –Ω–∞–∂–º–∏—Ç–µ /start",
                #                      reply_markup=kb_answer4)
                await bot.send_message(callback.from_user.id,
                                     f"\n{ret[1]}\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ - –Ω–∞–∂–º–∏—Ç–µ /start",reply_markup=kb_answer4)

    if str == "meropri":
        (spec,) = cur.execute(f"SELECT spec FROM users WHERE call = '{callback.from_user.id}'").fetchone()
        print(spec)
        (minid,) = cur.execute(f"SELECT min(id) FROM adminNews WHERE who = '{spec}'").fetchone()
        for ret in cur.execute(f"SELECT img,text FROM adminNews WHERE who ='{spec}' AND id = {minid}"):
            await bot.send_photo(callback.from_user.id,ret[0],f"\n{ret[1]}")

    if str == "mounth":
        (count,) = cur.execute(f"SELECT count(text) FROM adminNewsBest").fetchone()
        base.commit()
        print("count mounth== ", count)
        if count == 1:
            for ret in cur.execute("SELECT img,text FROM adminNewsBest WHERE id = 1"):
                # await bot.send_photo(callback.from_user.id, ret[0],
                #                      f"\n{ret[1]}\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ - –Ω–∞–∂–º–∏—Ç–µ /start")
                await bot.send_message(callback.from_user.id,
                                     f"\n{ret[1]}\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ - –Ω–∞–∂–º–∏—Ç–µ /start")
        else:
            for ret in cur.execute("SELECT img,text FROM adminNewsBest WHERE id = 1"):
                # await bot.send_photo(callback.from_user.id, ret[0],
                #                      f"\n{ret[1]}\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ - –Ω–∞–∂–º–∏—Ç–µ /start",
                #                      reply_markup=kb_answer7)
                await bot.send_message(callback.from_user.id,
                                     f"\n{ret[1]}\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ - –Ω–∞–∂–º–∏—Ç–µ /start",reply_markup=kb_answer7)



async def Answer4(callback:types.CallbackQuery,state: FSMContext):
    global k
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "yes":
        await bot.send_message(callback.from_user.id,
                               f"–ï—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É?",
                               reply_markup=kb_answer5)

    if str == "no":
        await bot.send_message(callback.from_user.id,
                               f"–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –Ω–µ —Ç–∞–∫?")
        await WhatIsFail.fail.set()

    if str == "more":
        k+=1
        some = cur.execute(f"SELECT id FROM adminNewsLast WHERE id = {k}").fetchone()
        if some == None:
            k = 1
        for ret in cur.execute(f"SELECT img,text FROM adminNewsLast WHERE id = {k}"):
            # await bot.send_photo(callback.from_user.id, ret[0], f"\n{ret[1]}", reply_markup=kb_answer4)
            await bot.send_message(callback.from_user.id, f"\n{ret[1]}", reply_markup=kb_answer4)

async def Answer6(callback:types.CallbackQuery,state: FSMContext):
    global k
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "yes":
        await bot.send_message(callback.from_user.id,
                               f"–ï—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É?",
                               reply_markup=kb_answer5)

    if str == "no":
        await bot.send_message(callback.from_user.id,
                               f"–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –Ω–µ —Ç–∞–∫?")

        await WhatIsFail.fail.set()
    if str == "more":
        global n
        n+=1


        (spec,) = cur.execute(f"SELECT spec FROM users WHERE call = '{callback.from_user.id}'").fetchone()
        print(spec)
        (k,) = cur.execute(f"SELECT min(id) FROM adminNews WHERE who = '{spec}'").fetchone()

        some = cur.execute(f"SELECT id FROM adminNews WHERE id = {k + n}").fetchone()

        if some == None:
            (k,) = cur.execute(f"SELECT min(id) FROM adminNews WHERE who = '{spec}'").fetchone()
            n = 0
        (spec,) = cur.execute(f"SELECT spec FROM users WHERE call = '{callback.from_user.id}'").fetchone()
        for ret in cur.execute(f"SELECT img,text FROM adminNews WHERE id = {k} AND who = '{spec}'"):
            await bot.send_photo(callback.from_user.id, ret[0], f"\n{ret[1]}", reply_markup=kb_answer6)

async def Answer7(callback:types.CallbackQuery,state: FSMContext):
    global k
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "yes":
        await bot.send_message(callback.from_user.id,
                               f"–ï—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É?",
                               reply_markup=kb_answer5)

    if str == "no":
        await bot.send_message(callback.from_user.id,
                               f"–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –Ω–µ —Ç–∞–∫?")
        await WhatIsFail.fail.set()

    if str == "more":
        k+=1
        some = cur.execute(f"SELECT id FROM adminNewsBest WHERE id = {k}").fetchone()
        if some == None:
            k = 1
        for ret in cur.execute(f"SELECT img,text FROM adminNewsBest WHERE id = {k}"):
            #await bot.send_photo(callback.from_user.id, ret[0], f"\n{ret[1]}", reply_markup=kb_answer7)
            await bot.send_message(callback.from_user.id, f"\n{ret[1]}", reply_markup=kb_answer7)

async def Answer8(callback:types.CallbackQuery,state: FSMContext):
    global k
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "yes":
        await bot.send_message(callback.from_user.id,
                               f"–ï—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É?",
                               reply_markup=kb_answer5)

    if str == "no":
        await bot.send_message(callback.from_user.id,
                               f"–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –Ω–µ —Ç–∞–∫?")
        await WhatIsFail.fail.set()

    if str == "more":
        k+=1
        some = cur.execute(f"SELECT id FROM adminAvent WHERE id = {k}").fetchone()
        if some == None:
            k = 1
        for ret in cur.execute(f"SELECT img,text FROM adminAvent WHERE id = {k}"):
            await bot.send_photo(callback.from_user.id, ret[0], f"\n{ret[1]}", reply_markup=kb_answer8)

async def whatIsFail(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['datatime'] = datetime.date.today()
        data['call'] = message.chat.id
        data['link'] = message.from_user.url
        data['name'] = message.text

    await bot.send_message(message.chat.id,
                           f"–°–ø–∞—Å–∏–±–æ! –Ø —Å—Ç–∞–Ω—É –ª—É—á—à–µ!")
    await sql_add_fail(state)
    await state.finish()
    await main(message)

async def Answer5(callback:types.CallbackQuery,state: FSMContext):
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "yes":
        await bot.send_message(callback.from_user.id,
                               f"–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –Ω–µ —Ç–∞–∫?")
        await WhatIsFail.fail.set()
    if str == "no":
        await bot.send_message(callback.from_user.id,
                               f"–°–ø–∞—Å–∏–±–æ, —è —Å—Ç–∞—Ä–∞—é—Å—å!")
        await bot.send_message(callback.from_user.id,
                               f"–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                               reply_markup=kb_answer1)
#### 3 punct
# async def ispoln(message:types.Message,state: FSMContext):
#     async with state.proxy() as data:
#         data['datatime'] = datetime.date.today()
#         data['call'] = message.chat.id
#         data['link'] = message.from_user.url
#         data['who'] = message.text
#
#     await bot.send_message(message.chat.id,f"–ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏ –∏ –±—é–¥–∂–µ—Ç?")
#     await FindIspoln.srok.set()

# async def srok(message:types.Message,state: FSMContext):
#     async with state.proxy() as data:
#         data['srok'] = message.text
#
#     await bot.send_message(message.chat.id,f"–°–ø–∞—Å–∏–±–æ, –ø–æ–Ω—è–ª–∞! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –ø—Ä–∏—à–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º. –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?",reply_markup=kb_answer5)
#     await sql_add_ispoln(state)
#     await state.finish()
    # await main(message)
###4 punct

async def MyWhat(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['datatime'] = datetime.date.today()
        data['call'] = message.chat.id
        data['link'] = message.from_user.url
        data['what'] = message.text
    await bot.send_message(message.chat.id,f"–ö–æ–º—É –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã?")
    await My.who.set()

async def MyWho(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['who'] = message.text
    await bot.send_message(message.chat.id,
                           f"–û–ø–∏—à–∏ —Å–≤–æ–π –æ–ø—ã—Ç –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ?")
    await My.describe.set()

async def MyDescribe(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['describe'] = message.text
    await bot.send_message(message.chat.id,
                           f"–ü—Ä–∏–∫—Ä–µ–ø–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–µ —Ä–µ–∑—é–º–µ/—Å–∞–π—Ç:")
    await My.link2.set()

async def MyLink(message:types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['link2'] = message.text

    await bot.send_message(message.chat.id,
                           f"–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç —Ç–≤–æ–∏ —É—Å–ª—É–≥–∏?")
    await My.price.set()


async def MyPrice(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = message.text
    await bot.send_message(message.chat.id,
                           f"–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–æ–∫–∞–∂—É —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–º, –∫—Ç–æ –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏.\n–ê –ø–æ–∫–∞ –≤–µ—Ä–Ω–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=kb_answer1)

    await sql_add_MyResume(state)
    await state.finish()

async def thankyou(callback:types.CallbackQuery,state: FSMContext):
    await bot.answer_callback_query(callback.id)
    await bot.send_message(callback.from_user.id,f"–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",reply_markup=kb_answer1)

async def greatmeropr(callback:types.CallbackQuery,state: FSMContext):
    await bot.answer_callback_query(callback.id)
    await bot.send_message(callback.from_user.id,f"–ü–æ —Ç–∞–∫–æ–º—É –∂–µ –ø—Ä–∏–Ω—Ü–∏–ø—É —è –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–µ–±–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ –∏ –æ–Ω–ª–∞–π–Ω —Ñ–æ—Ä–º–∞—Ç–µ.\n\n –ù–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è ‚Äì –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –∏ –ø—Ä–∏—à–ª—é –±–∏–ª–µ—Ç –≤ —ç—Ç–æ—Ç –∂–µ —á–∞—Ç–∏–∫ üéü",reply_markup=kb_greatgo)

async def greatgo(callback:types.CallbackQuery,state: FSMContext):
    await bot.answer_callback_query(callback.id)
    await bot.send_message(callback.from_user.id,
                           f"–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å, –ø–æ–π–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏?",
                           reply_markup=kb_answer1)

async def helpMaya(callback:types.CallbackQuery,state: FSMContext):
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "yes":
        await bot.send_message(callback.from_user.id,f"–° —á–µ–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?")
        await Question.q_from_user.set()
    if str == "no":
        await bot.send_message(callback.from_user.id,f"–ü—Ä–∏—Ö–æ–¥–∏, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è! –° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–º–æ–≥—É",reply_markup=kb_answer1)

#user_analytics = {}

# async def lora(message:types.Message):
    # user_analytics[message.from_user.id] = {}
    # user_analytics[message.from_user.id]['start_date'] = datetime.date.today()
    # user_analytics[message.from_user.id]['end_date'] = datetime.date.today()
    #lora_bot.user(message.chat.id,"5454478500:AAEE7tWJYsdMbP7tFpMT-ktMW-wcH3Zpios")
    # #info = lora_bot.analyze_total(datetime.date.today(), datetime.date.today())
    # #await bot.send_message(message.chat.id, info,reply_markup=analytics_markup)
    # #photo, info = lora_bot.analyze_dau(datetime.date.today(), datetime.date.today())
    # #bot.send_message(message.chat.id, info)
    # #await bot.send_photo(message.chat.id, photo,info)
    # # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö(–≥—Ä–∞—Ñ–∏–∫ + —Ç–µ–∫—Å—Ç)
    # photo, info= lora_bot.analyze_new_user(None,None) #varchar —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –ø–æ—ç–∫—Å–ø–µ—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
    # print(info)
    # await bot.send_message(message.chat.id, info)
    # # buffer = io.BytesIO()
    # # photo.save(buffer, format='JPEG',quality=75)
    # # photo = buffer.getbuffer()
    # #mg_byte_arr = img_byte_arr.getvalue()
    # #photo = anvil.BlobMedia(content_type="image/jpeg", content=img_byte_arr)
    # await bot.send_photo(message.chat.id, photo)
    #
    # photo, info = lora_bot.analyze_dau(None,None)
    # await bot.send_message(message.chat.id, info)
    # await bot.send_photo(message.chat.id, photo)

# async def message2days(callback,dp:Dispatcher):
#     await bot.send_message(callback,f"–ü—Ä–∏–≤–µ—Ç!üëã\n\n\
# –ù–∞—à–∏ –æ–Ω–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è.\n\n\
# –£—á–∞—Å—Ç–≤—É–µ—à—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ?",reply_markup=kb_days2answer1)


# async def days2answer1(callback:types.CallbackQuery):
#     await bot.answer_callback_query(callback.id)
#     str = callback.data.split("_")[1]
#     if str == "yes":
#         await bot.send_message(callback.from_user.id, f"–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è—Ö! –ö–∞–∫ –≤—Å–µ –ø—Ä–æ—à–ª–æ?")
#         await Days2message.impression.set()
#     if str == "no":
#         await bot.send_message(callback.from_user.id,
#                                f"–ü–æ—á–µ–º—É?",reply_markup=kb_days2answer2)
async def message2days():
    for (ret,) in cur.execute(f"SELECT call FROM users WHERE clever != 'NULL'"):
        try:
            await bot.send_message(ret,f"–ü—Ä–∏–≤–µ—Ç! –£—á–∞—Å—Ç–≤—É–µ—à—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ –≤ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–µ?",reply_markup=kb_days2answer3)
        except:
            cur.execute(f"DELETE FROM users WHERE call = {ret}")
            base.commit()
            continue


async def messageformonday():
    mass = []
    for (ret,) in cur.execute(f"SELECT call FROM nextgo WHERE answer = 1"):
        mass.append(ret)
    print(mass)
    for i in mass:
        (name,) = cur.execute(
            f'SELECT name FROM users  WHERE call != "{i}" ORDER BY RANDOM()').fetchone()
        base.commit()
        print(name)
        (namecity,) = cur.execute(f'SELECT city FROM users WHERE name = "{name}"').fetchone()
        (companyname,) = cur.execute(f'SELECT company FROM users WHERE name = "{name}"').fetchone()
        (rolename,) = cur.execute(f'SELECT spec FROM users WHERE name = "{name}"').fetchone()
        (aboutname,) = cur.execute(f'SELECT clever FROM users WHERE name = "{name}"').fetchone()
        (link,) = cur.execute(f'SELECT link FROM users WHERE name = "{name}" ').fetchone()
        print(link)
        base.commit()
        try:
            await bot.send_message(i,
                                f"–¢–≤–æ—è –ø–∞—Ä–∞ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:\n\n{name} - ({namecity})\n–ü—Ä–æ—Ñ–∏–ª—å - @{link}\n–ö–æ–º–ø–∞–Ω–∏—è: {companyname}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {rolename}\n–ß–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –ø–∞—Ä—Ç–Ω–µ—Ä: {aboutname}\n\n–ù–∞–ø–∏—à–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –≤ Telegram ‚Äì @{link}\n–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π, –¥–æ–≥–æ–≤–æ—Ä–∏—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ —Å—Ä–∞–∑—É üôÇ \n\n–ë—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ –≤ –æ—Ç–≤–µ—Ç.",
                                reply_markup=kb_answer3)
        except:
            continue

async def updateBotGPT():
    cur.execute(f"UPDATE botGPT SET kol = 5 WHERE dostup = 'test'")
    base.commit()
    cur.execute(f"UPDATE botGPT SET kol = 20 WHERE dostup = 'min'")
    base.commit()
    cur.execute(f"UPDATE botGPT SET kol = 50 WHERE dostup = 'med'")
    base.commit()
    for (ret,) in cur.execute(f"SELECT call FROM botGPT WHERE dostup != 'max'"):
        try:
            await bot.send_message(ret,f"–î–æ—Å—Ç—É–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞—Ä–∏—Ñ–∞–º!\n\n‚Äì 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n‚Äì 20 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å 349 —Ä—É–±/–º–µ—Å\n‚Äì 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å 649 —Ä—É–±/–º–µ—Å\n‚Äì ‚àû —á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –¥–µ–Ω—å 1490 —Ä—É–±/–º–µ—Å\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ç–∞—Ä–∏—Ñ–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @maya_mono",reply_markup=kb_answer1)
            await state.finish()
        except:
            continue


    # scheduler.add_job(message2days, "cron", day_of_week='fri', hour=12, minute=30,
    #                   args=(callback, dp,))

#scheduler.add_job(messageformonday, "cron", day_of_week='mon', hour=10, minute=30,
                              #args=(callback.from_user.id, dp,))

        # mass = []
        # for (ret,) in cur.execute(f"SELECT call FROM nextgo WHERE answer = 1"):
        #     mass.append(ret)
        # print(mass)
        # for i in mass:
        #     (name,) = cur.execute(
        #         f'SELECT name FROM users  WHERE call != {i} ORDER BY RANDOM()').fetchone()  # LIMIT 1;
        #     base.commit()
        #     print(name)

#analitics start in admin and function is here
async def statistic(callback:types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "users":
        await bot.send_message(callback.from_user.id,f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥",reply_markup = kb_time1)
    if str == "start":
        await bot.send_message(callback.from_user.id,f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥",reply_markup = kb_time2)
    if str == "activate":
        await bot.send_message(callback.from_user.id,f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥",reply_markup = kb_time3)
    if str == "spec":
        await bot.send_message(callback.from_user.id,f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥",reply_markup = kb_time4)
    if str == "ottok":
        mounth = datetime.date.today() + relativedelta(months=-1) #2022-11-20

        print(mounth)
        mounth_str = mounth.strftime('%m')
        year_str = mounth.strftime('%y')
        print(mounth_str) #11
        print(year_str)
        kol_user = 0
        kol_all = 0
        for (ret,) in cur.execute(f"SELECT call FROM users"):
            kol_all +=1
        for (ret,) in cur.execute(f"SELECT call FROM users WHERE datatime <='20{year_str}-{mounth_str}-1'"):
            kol_user +=1
        novoreg = 0
        for (ret,) in cur.execute(f"SELECT call FROM users WHERE datatime <='20{year_str}-{mounth_str}-30' AND datatime >='20{year_str}-{mounth_str}-01'"):
            novoreg+=1
        print(novoreg)
        summa = math.fabs(kol_user + novoreg - kol_all)
        await bot.send_message(callback.from_user.id,f"–û—Ç—Ç–æ–∫ {summa} %",reply_markup=kb_for_admin())

async def time1(callback:types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "today":
        today = 0
        for ret in cur.execute(f"SELECT call FROM users WHERE datatime = '{datetime.date.today()}'"):
            today+=1
        await bot.send_message(callback.from_user.id,f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è : {today}",reply_markup=kb_for_admin())
    if str == "week":
        week = 0
        dat = datetime.date.today() - datetime.timedelta(days=7)
        for ret in cur.execute(f"SELECT call FROM users WHERE datatime <='{datetime.date.today()}' AND datatime >= '{dat}'"):
            week+=1
        await bot.send_message(callback.from_user.id,f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é : {week}",reply_markup=kb_for_admin())
    if str == "mounth":
        mounth = 0
        dat = datetime.date.today() - datetime.timedelta(days=30)
        for ret in cur.execute(
                f"SELECT call FROM users WHERE datatime <='{datetime.date.today()}' AND datatime >='{dat}'"):
            mounth += 1
        await bot.send_message(callback.from_user.id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü : {mounth}",
                               reply_markup=kb_for_admin())
async def time2(callback:types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "today":
        today = 0
        for ret in cur.execute(f"SELECT call FROM statistic_start WHERE datatime = '{datetime.date.today()}'"):
            today += 1
        (today_all,) = cur.execute(f"SELECT sum(kol) FROM statistic_start WHERE datatime = '{datetime.date.today()}'").fetchone()
        await bot.send_message(callback.from_user.id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è : {today}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö –∑–∞—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è : {today_all}",
                               reply_markup=kb_for_admin())
    if str == "week":
        week = 0
        dat = datetime.date.today() - datetime.timedelta(days=7)
        for ret in cur.execute(
                f"SELECT call FROM statistic_start WHERE datatime <='{datetime.date.today()}' AND datatime >='{dat}'"):
            week += 1
        (week_all,) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE datatime <='{datetime.date.today()}' AND datatime >='{dat}'").fetchone()
        await bot.send_message(callback.from_user.id,
                               f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é : {week}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö –∑–∞—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é : {week_all}",
                               reply_markup=kb_for_admin())
    if str == "mounth":
        mounth = 0
        dat = datetime.date.today() - datetime.timedelta(days=30)
        for ret in cur.execute(
                f"SELECT call FROM statistic_start WHERE datatime <='{datetime.date.today()}' AND datatime >='{dat}'"):
            mounth += 1
        (mounth_all,) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE datatime <='{datetime.date.today()}' AND datatime >='{dat}'").fetchone()
        await bot.send_message(callback.from_user.id,
                               f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü : {mounth}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö –∑–∞—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü : {mounth_all}",
                               reply_markup=kb_for_admin())

async def time3(callback:types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "today":
        today = 0
        reg = 0
        for ret in cur.execute(f"SELECT call FROM statistic_start WHERE datatime = '{datetime.date.today()}'"):
            today += 1
        (today_all,) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE datatime = '{datetime.date.today()}'").fetchone()
        for ret in cur.execute(
            f"SELECT call FROM users WHERE datatime = '{datetime.date.today()}'"):
            reg+=1
        try:
            summunik = reg / today * 100
            summall = reg / today_all * 100
            await bot.send_message(callback.from_user.id,
                                   f"–ü—Ä–æ—Ü–µ–Ω—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è : {summunik} %\n\n–ü—Ä–æ—Ü–µ–Ω—Ç –æ–±—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è : {summall} %",
                                   reply_markup=kb_for_admin())
        except:
            await bot.send_message(callback.from_user.id,f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",reply_markup=kb_for_admin())


    if str == "week":
        week = 0
        reg = 0
        dat = datetime.date.today() - datetime.timedelta(days=7)
        for ret in cur.execute(f"SELECT call FROM statistic_start WHERE datatime <='{datetime.date.today()}' AND datatime >='{dat}'"):
            week += 1
        (week_all,) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE datatime <='{datetime.date.today()}' AND datatime >='{dat}'").fetchone()
        for ret in cur.execute(
                f"SELECT call FROM users WHERE datatime <='{datetime.date.today()}' AND datatime >='{dat}'"):
            reg += 1
        try:
            summunik = reg / week * 100
            summall = reg / week_all * 100
            await bot.send_message(callback.from_user.id,
                                   f"–ü—Ä–æ—Ü–µ–Ω—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é : {summunik} %\n\n–ü—Ä–æ—Ü–µ–Ω—Ç –æ–±—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é : {summall} %",
                                   reply_markup=kb_for_admin())
        except:
            await bot.send_message(callback.from_user.id,
                                   f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                   reply_markup=kb_for_admin())


    if str == "mounth":
        mounth = 0
        reg = 0
        dat = datetime.date.today() - datetime.timedelta(days=30)
        for ret in cur.execute(f"SELECT call FROM statistic_start WHERE datatime <='{datetime.date.today()}' AND datatime >='{dat}'"):
            mounth += 1
        (mounth_all,) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE datatime <='{datetime.date.today()}' AND datatime >='{dat}'").fetchone()
        for ret in cur.execute(
                f"SELECT call FROM users WHERE datatime <='{datetime.date.today()}' AND datatime >='{dat}'"):
            reg += 1
        try:
            summunik = reg / mounth * 100
            summall = reg / mounth_all * 100
            await bot.send_message(callback.from_user.id,
                                   f"–ü—Ä–æ—Ü–µ–Ω—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è : {summunik} %\n\n–ü—Ä–æ—Ü–µ–Ω—Ç –æ–±—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è : {summall} %",
                                   reply_markup=kb_for_admin())
        except:
            await bot.send_message(callback.from_user.id,
                                   f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                   reply_markup=kb_for_admin())

async def time4(callback:types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    str = callback.data.split("_")[1]
    if str == "today":
        dict_prof = {}
        (dict_prof['–°—Ç–∏–ª–∏—Å—Ç'],) = cur.execute(f"SELECT sum(kol) FROM statistic_start WHERE spec = '–°—Ç–∏–ª–∏—Å—Ç' AND datatime = '{datetime.date.today()}'").fetchone()
        (dict_prof['–î–∏–∑–∞–π–Ω–µ—Ä'],) = cur.execute(f"SELECT sum(kol) FROM statistic_start WHERE spec = '–î–∏–∑–∞–π–Ω–µ—Ä' AND datatime = '{datetime.date.today()}'").fetchone()
        (dict_prof['–í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞'],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞' AND datatime = '{datetime.date.today()}'").fetchone()
        (dict_prof['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–µ–∫–ª–∞–º–µ'],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–µ–∫–ª–∞–º–µ' AND datatime = '{datetime.date.today()}'").fetchone()
        (dict_prof['–í–ª–∞–¥–µ–ª–µ—Ü –±—Ä–µ–Ω–¥–∞'],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–í–ª–∞–¥–µ–ª–µ—Ü –±—Ä–µ–Ω–¥–∞' AND datatime = '{datetime.date.today()}'").fetchone()
        (dict_prof['–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä'],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä' AND datatime = '{datetime.date.today()}'").fetchone()
        (dict_prof['–ë–∞–π–µ—Ä'],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–ë–∞–π–µ—Ä' AND datatime = '{datetime.date.today()}'").fetchone()
        (dict_prof['–í–ª–∞–¥–µ–ª–µ—Ü –±—É—Ç–∏–∫–∞ '],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–í–ª–∞–¥–µ–ª–µ—Ü –±—É—Ç–∏–∫–∞' AND datatime = '{datetime.date.today()}'").fetchone()
        await bot.send_message(callback.from_user.id,f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è: \n\n {dict_prof}",reply_markup=kb_for_admin())
    if str == "week":
        dict_prof = {}
        dat = datetime.date.today() - datetime.timedelta(days=7)
        (dict_prof['–°—Ç–∏–ª–∏—Å—Ç'],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–°—Ç–∏–ª–∏—Å—Ç' AND datatime <='{datetime.date.today()}' AND datatime >='{dat}'").fetchone()
        (dict_prof['–î–∏–∑–∞–π–Ω–µ—Ä'],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–î–∏–∑–∞–π–Ω–µ—Ä' AND datatime <='{datetime.date.today()}' AND datatime >='{dat}'").fetchone()
        (dict_prof['–í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞'],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞' AND datatime <='{datetime.date.today()}' AND datatime >='{dat}'").fetchone()
        (dict_prof['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–µ–∫–ª–∞–º–µ'],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–µ–∫–ª–∞–º–µ' AND datatime <='{datetime.date.today()}' AND datatime >='{dat}'").fetchone()
        (dict_prof['–í–ª–∞–¥–µ–ª–µ—Ü –±—Ä–µ–Ω–¥–∞'],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–í–ª–∞–¥–µ–ª–µ—Ü –±—Ä–µ–Ω–¥–∞' AND datatime <='{datetime.date.today()}' AND datatime >='{dat}'").fetchone()
        (dict_prof['–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä'],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä' AND datatime <='{datetime.date.today()}' AND datatime >='{dat}'").fetchone()
        (dict_prof['–ë–∞–π–µ—Ä'],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–ë–∞–π–µ—Ä' AND datatime <='{datetime.date.today()}' AND datatime >='{dat}'").fetchone()
        (dict_prof['–í–ª–∞–¥–µ–ª–µ—Ü –±—É—Ç–∏–∫–∞ '],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–í–ª–∞–¥–µ–ª–µ—Ü –±—É—Ç–∏–∫–∞' AND datatime <='{datetime.date.today()}' AND datatime >='{dat}'").fetchone()
        await bot.send_message(callback.from_user.id, f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º –∑–∞ –Ω–µ–¥–µ–ª—é: \n\n {dict_prof}",
                               reply_markup=kb_for_admin())
    if str == "mounth":
        dict_prof = {}
        dat = datetime.date.today() - datetime.timedelta(days=30)
        (dict_prof['–°—Ç–∏–ª–∏—Å—Ç'],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–°—Ç–∏–ª–∏—Å—Ç' AND datatime <='{datetime.date.today()}' AND datatime >='{dat}'").fetchone()
        (dict_prof['–î–∏–∑–∞–π–Ω–µ—Ä'],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–î–∏–∑–∞–π–Ω–µ—Ä' AND datatime <='{datetime.date.today()}' AND datatime >='{dat}'").fetchone()
        (dict_prof['–í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞'],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞' AND datatime <='{datetime.date.today()}' AND datatime >='{dat}'").fetchone()
        (dict_prof['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–µ–∫–ª–∞–º–µ'],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–µ–∫–ª–∞–º–µ' AND datatime <='{datetime.date.today()}' AND datatime >='{dat}'").fetchone()
        (dict_prof['–í–ª–∞–¥–µ–ª–µ—Ü –±—Ä–µ–Ω–¥–∞'],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–í–ª–∞–¥–µ–ª–µ—Ü –±—Ä–µ–Ω–¥–∞' AND datatime <='{datetime.date.today()}' AND datatime >='{dat}'").fetchone()
        (dict_prof['–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä'],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä' AND datatime <='{datetime.date.today()}' AND datatime >='{dat}'").fetchone()
        (dict_prof['–ë–∞–π–µ—Ä'],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–ë–∞–π–µ—Ä' AND datatime <='{datetime.date.today()}' AND datatime >='{dat}'").fetchone()
        (dict_prof['–í–ª–∞–¥–µ–ª–µ—Ü –±—É—Ç–∏–∫–∞ '],) = cur.execute(
            f"SELECT sum(kol) FROM statistic_start WHERE spec = '–í–ª–∞–¥–µ–ª–µ—Ü –±—É—Ç–∏–∫–∞' AND datatime <='{datetime.date.today()}' AND datatime >='{dat}'").fetchone()
        await bot.send_message(callback.from_user.id, f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º –∑–∞ –º–µ—Å—è—Ü: \n\n {dict_prof}",
                               reply_markup=kb_for_admin())
#analitics close

#back1 back2 back3 back4 for networking
# async def back1(callback:types.CallbackQuery):
#     await bot.answer_callback_query(callback.id)
#     await bot.send_message(callback.from_user.id,f"–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",reply_markup=kb_answer1)
#     await state.finish()

####DIALOG II###

class Test(StatesGroup):
    Wait = State()
    Open = State()

async def reqII(message,state:FSMContext):
    print("IN reqII")
    #await asyncio.sleep(1)
    response = openai.Completion.create(
        model="text-davinci-003",
        prompt=message,
        temperature=0.9,
        max_tokens=1000,
        top_p=1.0,
        frequency_penalty=0.0,
        presence_penalty=0.6,
        stop=["You:"]
    )
    print(response)
    async with state.proxy() as data:
        data['text'] = response['choices'][0]['text']
    #await bot.send_message(id,f"{response['choices'][0]['text']}")
    #await IIbot.start.set()
    print(response['choices'][0]['text'])
    return response['choices'][0]['text']

async def test(message,state:FSMContext):
    k = 0
    async with state.proxy() as data:
        while data['text'] is Null:
            global my_new_message
            k += 1
            if k == 1:
                my_new_message = await bot.send_message(message, '–û—Ç–≤–µ—á–∞—é.')
                await asyncio.sleep(1)
                await bot.edit_message_text(chat_id=message, message_id=my_new_message.message_id,
                                            text='–û—Ç–≤–µ—á–∞—é..')
                await asyncio.sleep(1)
                await bot.edit_message_text(chat_id=message, message_id=my_new_message.message_id,
                                            text='–û—Ç–≤–µ—á–∞—é...')
            else:
                await bot.edit_message_text(chat_id=message, message_id=my_new_message.message_id,
                                            text='–û—Ç–≤–µ—á–∞—é.')
                await asyncio.sleep(1)
                await bot.edit_message_text(chat_id=message, message_id=my_new_message.message_id,
                                            text='–û—Ç–≤–µ—á–∞—é..')
                await asyncio.sleep(1)
                await bot.edit_message_text(chat_id=message, message_id=my_new_message.message_id,
                                            text='–û—Ç–≤–µ—á–∞—é...')
                await asyncio.sleep(1)






async def dialogII(message:types.Message,state:FSMContext):
    if message.text == "/stop":
        await state.finish()
        await start(message,state)
    else:
        await bot.send_chat_action(message.chat.id, ChatActions.TYPING)
        response = openai.Completion.create(
            model="text-davinci-003",
            prompt=message.text,
            temperature=0.9,
            max_tokens=1000,
            top_p=1.0,
            frequency_penalty=0.0,
            presence_penalty=0.6,
            stop=["You:"]
        )
        #print("FINISH OTVET")


        (dostup,) = cur.execute(f"SELECT dostup FROM botGPT WHERE call = '{message.chat.id}'").fetchone()
        if dostup != 'max':
            (kol,) = cur.execute(f"SELECT kol FROM botGPT WHERE call = '{message.chat.id}'").fetchone()
            if int(kol) <= 0:
                await bot.send_message(message.chat.id,
                                       f"–¢–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å :(\n\n–ó–∞–≤—Ç—Ä–∞ —Ç–≤–æ–π –¥–æ—Å—Ç—É–ø –æ–±–Ω–æ–≤–∏—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞—Ä–∏—Ñ—É!\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ - –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @maya_mono",
                                       reply_markup=kb_answer1)
                await state.finish()
            else:
                await bot.send_message(message.chat.id,
                                       f"{response['choices'][0]['text']}\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –Ω–∞–∂–º–∏—Ç–µ /stop")
                cur.execute(f"UPDATE botGPT SET kol = kol - 1 WHERE call = '{message.chat.id}'")
                base.commit()
                await IIbot.start.set()

        else:
            await bot.send_message(message.chat.id,
                                   f"{response['choices'][0]['text']}\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –Ω–∞–∂–º–∏—Ç–µ /stop")
            await IIbot.start.set()










    #my_thread = threading.Thread(target=reqII(message.text,state))
    #my_thread.start()
    #async with state.proxy() as data:
        #print(data['text'])
    # if message.text == "/stop":
    #     await state.finish()
    #     await start(message, state)
    # task = asyncio.create_task(reqII(message.text, message.chat.id, state))
    # k = 0
    # while True:
    #     if task.done():
    #         break
    #     global my_new_message
    #     k+=1
    #     if k == 1:
    #         my_new_message = await bot.send_message(message.chat.id, '–û—Ç–≤–µ—á–∞—é.')
    #         await asyncio.sleep(1)
    #         await bot.edit_message_text(chat_id=message.chat.id, message_id=my_new_message.message_id,
    #                                     text='–û—Ç–≤–µ—á–∞—é..')
    #         await asyncio.sleep(1)
    #         await bot.edit_message_text(chat_id=message.chat.id, message_id=my_new_message.message_id,
    #                                     text='–û—Ç–≤–µ—á–∞—é...')
    #     else:
    #         await asyncio.sleep(1)
    #         await bot.edit_message_text(chat_id=message.chat.id, message_id=my_new_message.message_id,
    #                                     text='–û—Ç–≤–µ—á–∞—é.')
    #         await asyncio.sleep(1)
    #         await bot.edit_message_text(chat_id=message.chat.id, message_id=my_new_message.message_id,
    #                                     text='–û—Ç–≤–µ—á–∞—é..')
    #         await asyncio.sleep(1)
    #         await bot.edit_message_text(chat_id=message.chat.id, message_id=my_new_message.message_id,
    #                                     text='–û—Ç–≤–µ—á–∞—é...')




        # await task
        # my_new_message = await bot.send_message(message.chat.id, '–û—Ç–≤–µ—á–∞—é.')
        # await asyncio.sleep(1)
        # await bot.edit_message_text(chat_id=message.chat.id, message_id=my_new_message.message_id,
        #                             text='–û—Ç–≤–µ—á–∞—é..')
        # await asyncio.sleep(1)
        # await bot.edit_message_text(chat_id=message.chat.id, message_id=my_new_message.message_id,
        #                             text='–û—Ç–≤–µ—á–∞—é...')

    # if task.done():
    #     my_new_message = await bot.send_message(message.chat.id, '–û—Ç–≤–µ—á–∞—é.')
    #     await asyncio.sleep(1)
    #     await bot.edit_message_text(chat_id=message.chat.id, message_id=my_new_message.message_id,
    #                                 text='–û—Ç–≤–µ—á–∞—é..')
    #     await asyncio.sleep(1)
    #     await bot.edit_message_text(chat_id=message.chat.id, message_id=my_new_message.message_id,
    #                                 text='–û—Ç–≤–µ—á–∞—é...')
    #
    # else:
    #     await bot.send_message(message.chat.id,
    #                            f"{task}\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –Ω–∞–∂–º–∏—Ç–µ /stop")  # {response['choices'][0]['text']}


    # await test(message.chat.id)
    # await task()
    #
    #
    # await bot.send_message(message.chat.id,
    #                            f"{await task()}\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –Ω–∞–∂–º–∏—Ç–µ /stop")#{response['choices'][0]['text']}
    # await IIbot.start.set()








            # await bot.send_message(message.chat.id, f"–û—Ç–≤–µ—á–∞—é.{message.message_id}")
            # print(".",message.message_id)
            # await asyncio.sleep(2)
            # await bot.delete_message(message.chat.id, message.message_id + 1)
            # await bot.send_message(message.chat.id, f"–û—Ç–≤–µ—á–∞—é..{message.message_id}")
            # print("..",message.message_id)
            # await asyncio.sleep(2)
            # await bot.delete_message(message.chat.id, message.message_id + 2)
            # await bot.send_message(message.chat.id, f"–û—Ç–≤–µ—á–∞—é...{message.message_id}")
            # print("...",message.message_id)
            # await asyncio.sleep(2)
            # await bot.delete_message(message.chat.id, message.message_id + 3)
            # await bot.send_message(message.chat.id, f"–û—Ç–≤–µ—á–∞—é.")
            # print(message.message_id)
            # await asyncio.sleep(2)
            # await bot.send_message(message.chat.id, f"–û—Ç–≤–µ—á–∞—é..")
            # print(message.message_id)
            # await asyncio.sleep(2)
            # await bot.send_message(message.chat.id, f"–û—Ç–≤–µ—á–∞—é...")
            # print(message.message_id)
            # break
            # await bot.send_message(message.chat.id, f"–û—Ç–≤–µ—á–∞—é.")
            # await asyncio.sleep(1)
            # await bot.delete_message(message.chat.id, message.message_id + 1)
            # await asyncio.sleep(1)
            # await bot.send_message(message.chat.id, f"–û—Ç–≤–µ—á–∞—é..")
            # await bot.delete_message(message.chat.id, message.message_id + 2)
            # await asyncio.sleep(1)
            # await bot.send_message(message.chat.id, f"–û—Ç–≤–µ—á–∞—é...")
            # await bot.delete_message(message.chat.id, message.message_id + 3)

    # if message.text == "/stop":
    #     await state.finish()
    #     await start(message,state)
    # else:
    #     response = openai.Completion.create(
    #         model="text-davinci-003",
    #         prompt=message.text,
    #         temperature=0.9,
    #         max_tokens=1000,
    #         top_p=1.0,
    #         frequency_penalty=0.0,
    #         presence_penalty=0.6,
    #         stop=["You:"]
    #     )
    #     if response:
    #         print("!!!!TRUE!!!")
    #     await bot.send_message(message.chat.id,
    #                            f"{response['choices'][0]['text']}\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –Ω–∞–∂–º–∏—Ç–µ /stop")
    #     await IIbot.start.set()


def shedl():
    scheduler.add_job(messageformonday, "cron", day_of_week='mon', hour=10, minute=30)
    scheduler.add_job(message2days, "cron", day_of_week='fri', hour=12, minute=30)
    scheduler.add_job(updateBotGPT, "cron", hour=00, minute=00)


if __name__ == "__main__":
    shedl()
    dp.register_callback_query_handler(spec, Text(startswith='spec_'),state=User.spec)
    dp.register_callback_query_handler(networking, Text(startswith='answer_'),state=None)
    dp.register_callback_query_handler(networkingAnswer, Text(startswith='answer2_'),state=None)
    dp.register_callback_query_handler(networkingAnswer3, Text(startswith='answer3_'), state=None)
    dp.register_callback_query_handler(parserButton, Text(startswith='parser_'),state=None)
    dp.register_callback_query_handler(dopParserButton, Text(startswith='dop_'))
    dp.register_callback_query_handler(Answer4, Text(startswith='answer4_'), state=None)
    dp.register_callback_query_handler(Answer5, Text(startswith='answer5_'), state=None)
    dp.register_callback_query_handler(Answer6, Text(startswith='answer6_'), state=None)
    dp.register_callback_query_handler(Answer7, Text(startswith='answer7_'), state=None)
    dp.register_callback_query_handler(Answer8, Text(startswith='answer8_'), state=None)
    dp.register_callback_query_handler(days2answer1, Text(startswith='days2answer1_'), state=None)
    dp.register_callback_query_handler(days2answer2, Text(startswith='days2answer2_'))
    dp.register_callback_query_handler(days2answer3, Text(startswith='days2answer3_'))
    dp.register_callback_query_handler(adminCall1, Text(startswith='admin_'),state=None)
    dp.register_callback_query_handler(adminWhoButtonNews, Text(startswith='group_'), state=AdminNews.who)
    dp.register_callback_query_handler(readyNetworking, Text(startswith='readyNetworking'), state=None)
    dp.register_callback_query_handler(gonext1, Text(startswith='gonext1'), state=None)
    dp.register_callback_query_handler(gonext2, Text(startswith='gonext2'), state=None)
    dp.register_callback_query_handler(gonext3, Text(startswith='gonext3'), state=None)
    dp.register_callback_query_handler(sendVack, Text(startswith='sendVack_'), state=FindIspoln.who)
    dp.register_callback_query_handler(thankyou, Text(startswith='thankyou'), state=None)
    dp.register_callback_query_handler(greatmeropr, Text(startswith='greatmeropr'), state=None)
    dp.register_callback_query_handler(greatgo, Text(startswith='greatgo'), state=None)
    dp.register_callback_query_handler(helpMaya, Text(startswith='helpMaya_'), state=None)
    dp.register_callback_query_handler(adminall, Text(startswith='adminall_'), state=None)
    dp.register_callback_query_handler(calllike, Text(startswith='like_'), state=None)
    dp.register_callback_query_handler(groupbudb, Text(startswith='groupbudb_'), state=None)

    dp.register_callback_query_handler(statistic, Text(startswith='stats_'), state=None)
    dp.register_callback_query_handler(time1, Text(startswith='time1_'), state=None)
    dp.register_callback_query_handler(time2, Text(startswith='time2_'), state=None)
    dp.register_callback_query_handler(time3, Text(startswith='time3_'), state=None)
    dp.register_callback_query_handler(time4, Text(startswith='time4_'), state=None)

    #dp.register_callback_query_handler(back1, Text(startswith='back1_1'), state=None)

    dp.register_message_handler(start, commands=['start'], state=None)
    dp.register_message_handler(admin, commands=['themono'], state=None)
    dp.register_message_handler(about, commands=['about'])
    dp.register_message_handler(contacts, commands=['contacts'])
    # dp.register_message_handler(lora, commands=['lora'])

    dp.register_message_handler(name,state=User.name)
    dp.register_message_handler(MySpec, state=User.spec)
    dp.register_message_handler(soclink, state=User.soclink)
    dp.register_message_handler(city, state=User.city)
    dp.register_message_handler(company, state=User.company)
    #dp.register_message_handler(role, state=User.role)
    dp.register_message_handler(clever, state=User.clever)
    dp.register_message_handler(helpMe, state=User.q_help)
    dp.register_message_handler(main)
    dp.register_message_handler(networkingMessage,state = Question.q_from_user)
    dp.register_message_handler(poshelaniaMessage, state=Poshelania.ans)
    dp.register_message_handler(whatIsFail, state=WhatIsFail.fail)
    dp.register_message_handler(impression, state=Days2message.impression)
    scheduler.start()
    #dp.register_message_handler(ispoln, state=FindIspoln.who)
    dp.register_message_handler(describeispoln, state=FindIspoln.describe)

    #dp.register_message_handler(AdminLastNewsPhoto, content_types=['photo'],state=AdminNewsLast.img)
    dp.register_message_handler(AdminLastNewsText, state=AdminNewsLast.text)
    #dp.register_message_handler(AdminBestNewsPhoto, content_types=['photo'], state=AdminNewsBest.img)
    dp.register_message_handler(AdminBestNewsText, state=AdminNewsBest.text)
    dp.register_message_handler(adminWhoNews, state=AdminNews.who)
    dp.register_message_handler(adminPhotoNews,content_types=['photo'], state=AdminNews.img)
    dp.register_message_handler(adminTextNews, state=AdminNews.text)
    dp.register_message_handler(adminPhotoAvent, content_types=['photo'], state=AdminAvent.img)
    dp.register_message_handler(adminTextAvent, state=AdminAvent.text)
    dp.register_message_handler(adminCallMess,state=AdminMessage.call)
    dp.register_message_handler(adminTextMess, state=AdminMessage.mess)
    dp.register_message_handler(adminTextAll, state=AdminMessageAll.mess)
    dp.register_message_handler(adminTextGroup, state=AdminMessageGroup.group)
    dp.register_message_handler(adminTextGroupMess, state=AdminMessageGroup.mess)
    dp.register_message_handler(MyWhat, state=My.what)
    dp.register_message_handler(MyWho, state=My.who)
    dp.register_message_handler(MyDescribe, state=My.describe)
    dp.register_message_handler(MyLink, state=My.link2)
    dp.register_message_handler(MyPrice, state=My.price)
    dp.register_message_handler(fromadmin, state=FromAdmin.message)
    dp.register_message_handler(toadminmess, state=FromAdmin.toadminmess)
    dp.register_message_handler(messageforgroupbydb, state=ForGroupByDb.message)
    #II
    dp.register_message_handler(dialogII, state=IIbot.start)



    executor.start_polling(dp, skip_updates=True,on_startup=on_startup)